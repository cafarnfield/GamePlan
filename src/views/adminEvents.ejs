<% 
  const layoutData = {
    title: 'Events Management',
    currentPage: 'events',
    pageTitle: 'Events Management',
    pageSubtitle: 'Manage all gaming events and schedules',
    breadcrumbs: [
      { name: 'Events', url: null }
    ],
    pendingUsers: typeof pendingUsers !== 'undefined' ? pendingUsers : 0,
    pendingEvents: typeof pendingEvents !== 'undefined' ? pendingEvents : 0,
    pendingGames: typeof pendingGames !== 'undefined' ? pendingGames : 0,
    totalPending: (typeof pendingUsers !== 'undefined' ? pendingUsers : 0) + (typeof pendingEvents !== 'undefined' ? pendingEvents : 0) + (typeof pendingGames !== 'undefined' ? pendingGames : 0),
    isDevelopmentAutoLogin: isDevelopmentAutoLogin,
    user: typeof user !== 'undefined' ? user : null
  };
%>

<%- include('partials/adminLayoutHeader', layoutData) %>

<style>
  .events-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .events-stats {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
  }
  
  .stat-badge {
    background: rgba(0, 50, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 8px 15px;
    font-size: 10px;
    color: #00ff00;
  }
  
  .stat-badge.highlight {
    background: rgba(0, 100, 255, 0.2);
    border-color: #0066ff;
    color: #00ffff;
  }
  
  .events-actions {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .action-btn {
    background: rgba(0, 255, 0, 0.8);
    color: #000;
    border: 1px solid #00ff00;
    padding: 10px 15px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .action-btn:hover {
    background: rgba(0, 255, 0, 0.9);
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }
  
  .action-btn.secondary {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border-color: #0066ff;
  }
  
  .action-btn.secondary:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .action-btn.danger {
    background: rgba(255, 0, 0, 0.8);
    color: #fff;
    border-color: #ff0000;
  }
  
  .action-btn.danger:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  .filters-section {
    background: rgba(0, 20, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .filters-title {
    font-size: 12px;
    color: #00ff00;
    margin: 0 0 15px 0;
  }
  
  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
  }
  
  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .filter-label {
    font-size: 8px;
    color: #888;
  }
  
  .filter-input, .filter-select {
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  .filter-input:focus, .filter-select:focus {
    outline: none;
    border-color: #00ffff;
    box-shadow: 0 0 5px rgba(0, 255, 255, 0.3);
  }
  
  .filter-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    flex-wrap: wrap;
  }
  
  
  .bulk-actions {
    background: rgba(0, 0, 100, 0.1);
    border: 2px solid #0066ff;
    padding: 20px;
    margin-bottom: 30px;
    display: none;
  }
  
  .bulk-actions.show {
    display: block;
  }
  
  .bulk-actions-title {
    font-size: 12px;
    color: #0066ff;
    margin: 0 0 15px 0;
  }
  
  .bulk-actions-content {
    display: flex;
    gap: 15px;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .selected-count {
    font-size: 10px;
    color: #00ffff;
  }
  
  .bulk-notes {
    flex: 1;
    min-width: 200px;
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  .events-table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(0, 10, 0, 0.8);
    border: 1px solid #00ff00;
  }
  
  .events-table th,
  .events-table td {
    border: 1px solid #00ff00;
    padding: 10px;
    text-align: left;
    font-size: 8px;
  }
  
  .events-table th {
    background: rgba(0, 50, 0, 0.8);
    color: #00ff00;
    font-size: 10px;
  }
  
  .events-table tr:nth-child(even) {
    background: rgba(0, 20, 0, 0.5);
  }
  
  .events-table tr:hover {
    background: rgba(0, 255, 0, 0.1);
  }
  
  .table-checkbox {
    width: 16px;
    height: 16px;
  }
  
  .no-events {
    text-align: center;
    padding: 60px 20px;
    color: #888;
    font-size: 12px;
  }
  
  .no-events-icon {
    font-size: 48px;
    margin-bottom: 20px;
    display: block;
  }
  
  .event-actions {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
  }
  
  .event-btn {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border: 1px solid #0066ff;
    padding: 4px 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 6px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .event-btn:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .event-btn.edit {
    background: rgba(0, 255, 0, 0.8);
    border-color: #00ff00;
    color: #000;
  }
  
  .event-btn.edit:hover {
    background: rgba(0, 255, 0, 0.9);
  }
  
  .event-btn.delete {
    background: rgba(255, 0, 0, 0.8);
    border-color: #ff0000;
  }
  
  .event-btn.delete:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .events-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .events-stats {
      justify-content: center;
    }
    
    .events-actions {
      justify-content: center;
    }
    
    .filters-grid {
      grid-template-columns: 1fr;
    }
    
    
    .bulk-actions-content {
      flex-direction: column;
      align-items: stretch;
    }
    
    .events-table {
      font-size: 6px;
    }
    
    .events-table th,
    .events-table td {
      padding: 5px;
    }
  }
</style>

<!-- Events Header -->
<div class="events-header">
  <div class="events-stats">
    <div class="stat-badge highlight">
      Total: <%= events.length %>
    </div>
    <div class="stat-badge">
      Upcoming: <%= events.filter(e => new Date(e.date) >= new Date()).length %>
    </div>
    <div class="stat-badge">
      Past: <%= events.filter(e => new Date(e.date) < new Date()).length %>
    </div>
    <div class="stat-badge">
      Live: <%= events.filter(e => {
        const now = new Date();
        const eventDate = new Date(e.date);
        const twoHoursLater = new Date(eventDate.getTime() + 2 * 60 * 60 * 1000);
        return eventDate <= now && now <= twoHoursLater;
      }).length %>
    </div>
  </div>
  
  <div class="events-actions">
    <a href="/event/new" class="action-btn">‚ûï Create Event</a>
    <button onclick="toggleBulkActions()" class="action-btn secondary">üìã Bulk Actions</button>
    <a href="/admin/events/calendar" class="action-btn secondary">üìÖ Calendar View</a>
  </div>
</div>

<!-- Filters Section -->
<div class="filters-section">
  <h3 class="filters-title">üîç Filter Events</h3>
  
  <form method="GET" action="/admin/events" id="filterForm">
    <div class="filters-grid">
      <div class="filter-group">
        <label class="filter-label">Status</label>
        <select name="status" class="filter-select">
          <option value="">All Events</option>
          <option value="upcoming" <%= filter === 'upcoming' ? 'selected' : '' %>>Upcoming</option>
          <option value="live" <%= filter === 'live' ? 'selected' : '' %>>Live Now</option>
          <option value="past" <%= filter === 'past' ? 'selected' : '' %>>Past</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Game</label>
        <select name="game" class="filter-select">
          <option value="">All Games</option>
          <% games.forEach(game => { %>
            <option value="<%= game._id %>" <%= selectedGame === game._id.toString() ? 'selected' : '' %>>
              <%= game.name %>
            </option>
          <% }) %>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Date From</label>
        <input type="date" name="dateFrom" class="filter-input" value="<%= dateFrom || '' %>">
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Date To</label>
        <input type="date" name="dateTo" class="filter-input" value="<%= dateTo || '' %>">
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Search</label>
        <input type="text" name="search" class="filter-input" placeholder="Event name..." value="<%= search || '' %>">
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Creator</label>
        <input type="text" name="creator" class="filter-input" placeholder="Creator name..." value="<%= creator || '' %>">
      </div>
    </div>
    
    <div class="filter-actions">
      <button type="submit" class="action-btn">Apply Filters</button>
      <a href="/admin/events" class="action-btn secondary">Clear All</a>
    </div>
  </form>
</div>


<!-- Bulk Actions -->
<div class="bulk-actions" id="bulkActions">
  <h3 class="bulk-actions-title">üìã Bulk Actions</h3>
  <div class="bulk-actions-content">
    <span class="selected-count" id="selectedCount">0 events selected</span>
    <input type="text" class="bulk-notes" id="bulkNotes" placeholder="Add notes for bulk action...">
    <button onclick="bulkDelete()" class="action-btn danger">Delete Selected</button>
    <button onclick="clearSelection()" class="action-btn secondary">Clear Selection</button>
  </div>
</div>

<!-- Events Content -->
<div id="eventsContent">
  <% if (events.length === 0) { %>
    <div class="no-events">
      <span class="no-events-icon">üéÆ</span>
      <h3>No events found</h3>
      <p>No events match your current filters.</p>
      <a href="/event/new" class="action-btn">Create Your First Event</a>
    </div>
  <% } else { %>
    
    <!-- Table View -->
    <div id="tableView">
      <table class="events-table">
        <thead>
          <tr>
            <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
            <th>Event Name</th>
            <th>Game</th>
            <th>Creator</th>
            <th>Date</th>
            <th>Players</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% events.forEach(event => { 
            const now = new Date();
            const eventDate = new Date(event.date);
            const twoHoursLater = new Date(eventDate.getTime() + 2 * 60 * 60 * 1000);
            
            let status = 'upcoming';
            if (eventDate <= now && now <= twoHoursLater) {
              status = 'live';
            } else if (eventDate < now) {
              status = 'past';
            }
          %>
            <tr>
              <td><input type="checkbox" class="table-checkbox event-checkbox" value="<%= event._id %>" onchange="updateBulkActions()"></td>
              <td><%= event.name %></td>
              <td><%= event.game ? event.game.name : 'Unknown Game' %></td>
              <td>
                <% if (event.createdBy) { %>
                  <%= event.createdBy.gameNickname || event.createdBy.name %>
                <% } else if (event.players && event.players.length > 0) { %>
                  <%= event.players[0].gameNickname || event.players[0].name %> (Legacy)
                <% } else { %>
                  Unknown
                <% } %>
              </td>
              <td>
                <%= new Date(event.date).toLocaleDateString() %><br>
                <%= new Date(event.date).toLocaleTimeString() %>
              </td>
              <td><%= event.players ? event.players.length : 0 %>/<%= event.playerLimit %></td>
              <td>
                <span class="event-status <%= status %>"><%= status.toUpperCase() %></span>
              </td>
              <td>
                <div class="event-actions">
                  <a href="/event/<%= event._id %>" class="event-btn">View</a>
                  <a href="/event/<%= event._id %>/edit" class="event-btn edit">Edit</a>
                  <button onclick="deleteEvent('<%= event._id %>', '<%= event.name %>')" class="event-btn delete">Delete</button>
                </div>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  <% } %>
</div>

<!-- Pagination -->
<%- include('partials/pagination', { currentPage, totalPages, req }) %>

<script>
  function toggleBulkActions() {
    const bulkActions = document.getElementById('bulkActions');
    bulkActions.classList.toggle('show');
  }
  
  function updateBulkActions() {
    const checkboxes = document.querySelectorAll('.event-checkbox:checked');
    const bulkActions = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');
    
    selectedCount.textContent = `${checkboxes.length} events selected`;
    
    if (checkboxes.length > 0) {
      bulkActions.classList.add('show');
    } else if (!bulkActions.classList.contains('show')) {
      // Don't auto-hide if manually opened
    }
  }
  
  function toggleSelectAll() {
    const selectAll = document.getElementById('selectAll');
    const checkboxes = document.querySelectorAll('.event-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectAll.checked;
    });
    
    updateBulkActions();
  }
  
  function clearSelection() {
    const checkboxes = document.querySelectorAll('.event-checkbox');
    checkboxes.forEach(checkbox => checkbox.checked = false);
    
    const selectAll = document.getElementById('selectAll');
    if (selectAll) selectAll.checked = false;
    
    updateBulkActions();
  }
  
  async function deleteEvent(eventId, eventName) {
    if (!confirm(`Are you sure you want to delete "${eventName}"? This action cannot be undone.`)) {
      return;
    }
    
    try {
      const response = await fetch(`/admin/event/${eventId}/delete`, {
        method: 'POST'
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error deleting event');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error deleting event');
    }
  }
  
  async function bulkDelete() {
    const checkboxes = document.querySelectorAll('.event-checkbox:checked');
    const eventIds = Array.from(checkboxes).map(cb => cb.value);
    const notes = document.getElementById('bulkNotes').value;
    
    if (eventIds.length === 0) {
      alert('Please select events first');
      return;
    }
    
    if (!confirm(`Are you sure you want to delete ${eventIds.length} event(s)? This action cannot be undone.`)) {
      return;
    }
    
    try {
      const response = await fetch('/admin/events/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ eventIds, notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error deleting events');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error deleting events');
    }
  }
  
  // Auto-submit filters on change (optional)
  document.querySelectorAll('.filter-select').forEach(select => {
    select.addEventListener('change', () => {
      // Uncomment to auto-submit on filter change
      // document.getElementById('filterForm').submit();
    });
  });
</script>

<%- include('partials/adminLayoutFooter') %>

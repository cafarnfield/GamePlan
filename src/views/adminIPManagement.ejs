<% 
  const layoutData = {
    title: 'IP Management',
    currentPage: 'ip-management',
    pageTitle: 'IP Address Management',
    pageSubtitle: 'Monitor and manage IP addresses for security and fraud prevention',
    breadcrumbs: [
      { name: 'IP Management', url: null }
    ],
    pendingUsers: typeof pendingUsers !== 'undefined' ? pendingUsers : 0,
    pendingEvents: typeof pendingEvents !== 'undefined' ? pendingEvents : 0,
    pendingGames: typeof pendingGames !== 'undefined' ? pendingGames : 0,
    isDevelopmentAutoLogin: isDevelopmentAutoLogin,
    user: typeof user !== 'undefined' ? user : null
  };
%>

<%- include('partials/adminLayoutHeader', layoutData) %>

<style>
  .ip-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .ip-stats {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
  }
  
  .stat-badge {
    background: rgba(0, 50, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 8px 15px;
    font-size: 10px;
    color: #00ff00;
  }
  
  .stat-badge.total {
    background: rgba(0, 100, 255, 0.2);
    border-color: #0066ff;
    color: #0066ff;
  }
  
  .stat-badge.suspicious {
    background: rgba(255, 165, 0, 0.2);
    border-color: #ffa500;
    color: #ffa500;
  }
  
  .stat-badge.blocked {
    background: rgba(255, 0, 0, 0.2);
    border-color: #ff0000;
    color: #ff0000;
  }
  
  .stat-badge.whitelisted {
    background: rgba(0, 255, 0, 0.2);
    border-color: #00ff00;
    color: #00ff00;
  }
  
  .ip-actions {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .action-btn {
    background: rgba(0, 255, 0, 0.8);
    color: #000;
    border: 1px solid #00ff00;
    padding: 10px 15px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .action-btn:hover {
    background: rgba(0, 255, 0, 0.9);
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }
  
  .action-btn.secondary {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border-color: #0066ff;
  }
  
  .action-btn.secondary:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .action-btn.warning {
    background: rgba(255, 165, 0, 0.8);
    color: #000;
    border-color: #ffa500;
  }
  
  .action-btn.warning:hover {
    background: rgba(255, 165, 0, 0.9);
  }
  
  .filters-section {
    background: rgba(0, 20, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .filters-title {
    font-size: 12px;
    color: #00ff00;
    margin: 0 0 15px 0;
  }
  
  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
  }
  
  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .filter-label {
    font-size: 8px;
    color: #888;
  }
  
  .filter-input, .filter-select {
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  .filter-input:focus, .filter-select:focus {
    outline: none;
    border-color: #00ffff;
    box-shadow: 0 0 5px rgba(0, 255, 255, 0.3);
  }
  
  .filter-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    flex-wrap: wrap;
  }
  
  .bulk-actions {
    background: rgba(0, 0, 100, 0.1);
    border: 2px solid #0066ff;
    padding: 20px;
    margin-bottom: 30px;
    display: none;
  }
  
  .bulk-actions.show {
    display: block;
  }
  
  .bulk-actions-title {
    font-size: 12px;
    color: #0066ff;
    margin: 0 0 15px 0;
  }
  
  .bulk-actions-content {
    display: flex;
    gap: 15px;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .selected-count {
    font-size: 10px;
    color: #00ffff;
  }
  
  .bulk-reason {
    flex: 1;
    min-width: 200px;
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  .ip-table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(0, 10, 0, 0.8);
    border: 1px solid #00ff00;
    margin-bottom: 30px;
  }
  
  .ip-table th,
  .ip-table td {
    border: 1px solid #00ff00;
    padding: 10px;
    text-align: left;
    font-size: 8px;
  }
  
  .ip-table th {
    background: rgba(0, 50, 0, 0.8);
    color: #00ff00;
    font-size: 10px;
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .ip-table tr:nth-child(even) {
    background: rgba(0, 20, 0, 0.5);
  }
  
  .ip-table tr:hover {
    background: rgba(0, 255, 0, 0.1);
  }
  
  .table-checkbox {
    width: 16px;
    height: 16px;
  }
  
  .ip-address {
    font-family: monospace;
    background: rgba(0, 0, 0, 0.5);
    padding: 2px 4px;
    border-radius: 2px;
    color: #00ffff;
    font-weight: bold;
  }
  
  .ip-status {
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 6px;
    font-weight: bold;
  }
  
  .ip-status.allowed {
    background: rgba(0, 255, 0, 0.2);
    color: #00ff00;
    border: 1px solid #00ff00;
  }
  
  .ip-status.suspicious {
    background: rgba(255, 165, 0, 0.2);
    color: #ffa500;
    border: 1px solid #ffa500;
  }
  
  .ip-status.blocked {
    background: rgba(255, 0, 0, 0.2);
    color: #ff0000;
    border: 1px solid #ff0000;
  }
  
  .ip-status.whitelisted {
    background: rgba(0, 255, 255, 0.2);
    color: #00ffff;
    border: 1px solid #00ffff;
  }
  
  .risk-score {
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 6px;
    font-weight: bold;
  }
  
  .risk-score.low {
    background: rgba(0, 255, 0, 0.2);
    color: #00ff00;
    border: 1px solid #00ff00;
  }
  
  .risk-score.medium {
    background: rgba(255, 165, 0, 0.2);
    color: #ffa500;
    border: 1px solid #ffa500;
  }
  
  .risk-score.high {
    background: rgba(255, 0, 0, 0.2);
    color: #ff0000;
    border: 1px solid #ff0000;
  }
  
  .registration-count {
    background: rgba(0, 100, 255, 0.2);
    color: #0066ff;
    border: 1px solid #0066ff;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 6px;
    font-weight: bold;
  }
  
  .associated-users {
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-size: 7px;
    color: #888;
  }
  
  .ip-actions-cell {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    min-width: 200px;
  }
  
  .ip-btn {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border: 1px solid #0066ff;
    padding: 8px 12px;
    font-family: 'Press Start 2P', monospace;
    font-size: 10px;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 4px;
    transition: all 0.3s ease;
    min-width: 60px;
    justify-content: center;
  }
  
  .ip-btn:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .ip-btn.view {
    background: rgba(0, 255, 255, 0.8);
    border-color: #00ffff;
    color: #000;
  }
  
  .ip-btn.view:hover {
    background: rgba(0, 255, 255, 0.9);
  }
  
  .ip-btn.block {
    background: rgba(255, 0, 0, 0.8);
    border-color: #ff0000;
  }
  
  .ip-btn.block:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  .ip-btn.unblock {
    background: rgba(0, 255, 0, 0.8);
    border-color: #00ff00;
    color: #000;
  }
  
  .ip-btn.unblock:hover {
    background: rgba(0, 255, 0, 0.9);
  }
  
  .ip-btn.whitelist {
    background: rgba(0, 255, 255, 0.8);
    border-color: #00ffff;
    color: #000;
  }
  
  .ip-btn.whitelist:hover {
    background: rgba(0, 255, 255, 0.9);
  }
  
  .ip-btn.note {
    background: rgba(255, 165, 0, 0.8);
    border-color: #ffa500;
    color: #000;
  }
  
  .ip-btn.note:hover {
    background: rgba(255, 165, 0, 0.9);
  }
  
  .no-ips {
    text-align: center;
    padding: 60px 20px;
    color: #888;
    font-size: 12px;
  }
  
  .no-ips-icon {
    font-size: 48px;
    margin-bottom: 20px;
    display: block;
  }
  
  /* Custom Modal Styling */
  .retro-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
  }
  
  .retro-modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .retro-modal-content {
    background: rgba(0, 20, 0, 0.95);
    border: 2px solid #00ff00;
    padding: 30px;
    max-width: 800px;
    max-height: 80vh;
    overflow-y: auto;
    position: relative;
  }
  
  .retro-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #00ff00;
    padding-bottom: 10px;
  }
  
  .retro-modal-title {
    font-size: 14px;
    color: #00ff00;
    margin: 0;
  }
  
  .retro-modal-close {
    background: rgba(255, 0, 0, 0.8);
    color: #fff;
    border: 1px solid #ff0000;
    padding: 5px 10px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    cursor: pointer;
  }
  
  .retro-modal-close:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  .retro-modal-body {
    color: #00ff00;
    font-size: 10px;
    line-height: 1.6;
  }
  
  .retro-modal-footer {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    margin-top: 20px;
    border-top: 1px solid #00ff00;
    padding-top: 15px;
  }
  
  .modal-input, .modal-textarea {
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    width: 100%;
    margin-bottom: 10px;
  }
  
  .modal-input:focus, .modal-textarea:focus {
    outline: none;
    border-color: #00ffff;
    box-shadow: 0 0 5px rgba(0, 255, 255, 0.3);
  }
  
  .modal-textarea {
    resize: vertical;
    min-height: 80px;
  }
  
  .ip-details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .ip-details-section {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid #00ff00;
    padding: 15px;
  }
  
  .ip-details-section h4 {
    color: #00ffff;
    font-size: 10px;
    margin: 0 0 10px 0;
    border-bottom: 1px solid #00ffff;
    padding-bottom: 5px;
  }
  
  .ip-details-table {
    width: 100%;
    font-size: 8px;
  }
  
  .ip-details-table td {
    padding: 3px 5px;
    border-bottom: 1px solid rgba(0, 255, 0, 0.2);
  }
  
  .ip-details-table td:first-child {
    color: #888;
    width: 40%;
  }
  
  .ip-details-table td:last-child {
    color: #00ff00;
  }
  
  .pattern-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-top: 10px;
  }
  
  .pattern-badge {
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 6px;
    font-weight: bold;
  }
  
  .pattern-badge.high {
    background: rgba(255, 0, 0, 0.2);
    color: #ff0000;
    border: 1px solid #ff0000;
  }
  
  .pattern-badge.medium {
    background: rgba(255, 165, 0, 0.2);
    color: #ffa500;
    border: 1px solid #ffa500;
  }
  
  .pattern-badge.low {
    background: rgba(0, 100, 255, 0.2);
    color: #0066ff;
    border: 1px solid #0066ff;
  }
  
  .notes-list {
    max-height: 200px;
    overflow-y: auto;
  }
  
  .note-item {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 255, 0, 0.3);
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .note-meta {
    font-size: 6px;
    color: #888;
    margin-bottom: 5px;
  }
  
  .note-content {
    font-size: 8px;
    color: #00ff00;
  }
  
  .alert {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    min-width: 300px;
    padding: 15px;
    border: 2px solid;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    animation: slideIn 0.3s ease;
  }
  
  .alert.success {
    background: rgba(0, 255, 0, 0.1);
    border-color: #00ff00;
    color: #00ff00;
  }
  
  .alert.error {
    background: rgba(255, 0, 0, 0.1);
    border-color: #ff0000;
    color: #ff0000;
  }
  
  .alert.warning {
    background: rgba(255, 165, 0, 0.1);
    border-color: #ffa500;
    color: #ffa500;
  }
  
  @keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .ip-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .ip-stats {
      justify-content: center;
    }
    
    .ip-actions {
      justify-content: center;
    }
    
    .filters-grid {
      grid-template-columns: 1fr;
    }
    
    .bulk-actions-content {
      flex-direction: column;
      align-items: stretch;
    }
    
    .ip-table {
      font-size: 6px;
    }
    
    .ip-table th,
    .ip-table td {
      padding: 5px;
    }
    
    .ip-actions-cell {
      flex-direction: column;
    }
    
    .retro-modal-content {
      margin: 10px;
      max-width: calc(100% - 20px);
    }
    
    .ip-details-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<!-- IP Management Header -->
<div class="ip-header">
  <div class="ip-stats">
    <div class="stat-badge total">
      🌐 Total: <%= stats?.total || 0 %>
    </div>
    <div class="stat-badge suspicious">
      ⚠️ Suspicious: <%= stats?.byStatus?.suspicious?.count || 0 %>
    </div>
    <div class="stat-badge blocked">
      🚫 Blocked: <%= stats?.byStatus?.blocked?.count || 0 %>
    </div>
    <div class="stat-badge whitelisted">
      ✅ Whitelisted: <%= stats?.byStatus?.whitelisted?.count || 0 %>
    </div>
  </div>
  
  <div class="ip-actions">
    <button onclick="refreshData()" class="action-btn">🔄 Refresh</button>
    <button onclick="exportData()" class="action-btn secondary">📥 Export</button>
    <% if (user.isSuperAdmin) { %>
      <button onclick="migrateIPs()" class="action-btn warning">💾 Migrate</button>
    <% } %>
    <button onclick="toggleBulkActions()" class="action-btn secondary">📋 Bulk Actions</button>
  </div>
</div>

<!-- Filters Section -->
<div class="filters-section">
  <h3 class="filters-title">🔍 Filter IP Addresses</h3>
  
  <form method="GET" action="/admin/ip-management" id="filterForm">
    <div class="filters-grid">
      <div class="filter-group">
        <label class="filter-label">Status</label>
        <select name="status" class="filter-select">
          <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Statuses</option>
          <option value="allowed" <%= filters.status === 'allowed' ? 'selected' : '' %>>Allowed</option>
          <option value="suspicious" <%= filters.status === 'suspicious' ? 'selected' : '' %>>Suspicious</option>
          <option value="blocked" <%= filters.status === 'blocked' ? 'selected' : '' %>>Blocked</option>
          <option value="whitelisted" <%= filters.status === 'whitelisted' ? 'selected' : '' %>>Whitelisted</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Risk Level</label>
        <select name="riskLevel" class="filter-select">
          <option value="" <%= !filters.riskLevel ? 'selected' : '' %>>All Risk Levels</option>
          <option value="low" <%= filters.riskLevel === 'low' ? 'selected' : '' %>>Low (0-29)</option>
          <option value="medium" <%= filters.riskLevel === 'medium' ? 'selected' : '' %>>Medium (30-69)</option>
          <option value="high" <%= filters.riskLevel === 'high' ? 'selected' : '' %>>High (70+)</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Search IP</label>
        <input type="text" name="search" class="filter-input" placeholder="Enter IP address..." value="<%= filters.search || '' %>">
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Sort By</label>
        <select name="sortBy" class="filter-select">
          <option value="riskScore" <%= filters.sortBy === 'riskScore' ? 'selected' : '' %>>Risk Score</option>
          <option value="registrationCount" <%= filters.sortBy === 'registrationCount' ? 'selected' : '' %>>Registration Count</option>
          <option value="lastSeen" <%= filters.sortBy === 'lastSeen' ? 'selected' : '' %>>Last Seen</option>
          <option value="firstSeen" <%= filters.sortBy === 'firstSeen' ? 'selected' : '' %>>First Seen</option>
        </select>
      </div>
    </div>
    
    <div class="filter-actions">
      <button type="submit" class="action-btn">Apply Filters</button>
      <a href="/admin/ip-management" class="action-btn secondary">Clear All</a>
    </div>
  </form>
</div>

<!-- Bulk Actions -->
<div class="bulk-actions" id="bulkActions">
  <h3 class="bulk-actions-title">📋 Bulk IP Actions</h3>
  <div class="bulk-actions-content">
    <span class="selected-count" id="selectedCount">0 IPs selected</span>
    <select class="filter-select" id="bulkAction" style="min-width: 150px;">
      <option value="">Select Action</option>
      <option value="block">🚫 Block Selected</option>
      <option value="unblock">✅ Unblock Selected</option>
      <option value="whitelist">🛡️ Whitelist Selected</option>
      <option value="remove-whitelist">❌ Remove from Whitelist</option>
    </select>
    <input type="text" class="bulk-reason" id="bulkReason" placeholder="Reason (required for block/whitelist)...">
    <button onclick="executeBulkAction()" class="action-btn warning">⚡ Execute</button>
    <button onclick="clearSelection()" class="action-btn secondary">🗑️ Clear</button>
  </div>
</div>

<!-- IP Address Table -->
<% if (ipAddresses && ipAddresses.length > 0) { %>
  <table class="ip-table">
    <thead>
      <tr>
        <th><input type="checkbox" id="selectAll" class="table-checkbox" onchange="toggleSelectAll()"></th>
        <th>IP Address</th>
        <th>Status</th>
        <th>Risk Score</th>
        <th>Registrations</th>
        <th>Associated Users</th>
        <th>Last Seen</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% ipAddresses.forEach(ip => { %>
        <tr>
          <td><input type="checkbox" class="table-checkbox ip-checkbox" value="<%= ip.ipAddress %>" onchange="updateBulkActions()"></td>
          
          <td>
            <span class="ip-address"><%= ip.ipAddress %></span>
          </td>
          
          <td>
            <span class="ip-status <%= ip.status %>">
              <%= ip.status.charAt(0).toUpperCase() + ip.status.slice(1) %>
            </span>
          </td>
          
          <td>
            <span class="risk-score <%= ip.riskScore < 30 ? 'low' : ip.riskScore < 70 ? 'medium' : 'high' %>">
              <%= ip.riskScore %>
            </span>
          </td>
          
          <td>
            <span class="registration-count"><%= ip.registrationCount %></span>
          </td>
          
          <td>
            <div class="associated-users" title="<%= ip.associatedUsers.map(u => u.email).join(', ') %>">
              <% if (ip.associatedUsers && ip.associatedUsers.length > 0) { %>
                <%= ip.associatedUsers.slice(0, 2).map(u => u.email).join(', ') %>
                <% if (ip.associatedUsers.length > 2) { %>
                  <br><small>+<%= ip.associatedUsers.length - 2 %> more</small>
                <% } %>
              <% } else { %>
                <span style="color: #666;">None</span>
              <% } %>
            </div>
          </td>
          
          <td>
            <div style="font-size: 7px; color: #888;">
              <%= new Date(ip.lastSeen).toLocaleDateString() %>
            </div>
          </td>
          
          <td>
            <div class="ip-actions-cell">
              <button onclick="viewIPDetails('<%= ip.ipAddress %>')" class="ip-btn view">
                <span>👁️</span>
                <span>View</span>
              </button>
              
              <% if (ip.status !== 'blocked') { %>
                <button onclick="blockIP('<%= ip.ipAddress %>')" class="ip-btn block">
                  <span>🚫</span>
                  <span>Block</span>
                </button>
              <% } else { %>
                <button onclick="unblockIP('<%= ip.ipAddress %>')" class="ip-btn unblock">
                  <span>✅</span>
                  <span>Unblock</span>
                </button>
              <% } %>
              
              <% if (ip.status !== 'whitelisted') { %>
                <button onclick="whitelistIP('<%= ip.ipAddress %>')" class="ip-btn whitelist">
                  <span>🛡️</span>
                  <span>Whitelist</span>
                </button>
              <% } else { %>
                <button onclick="removeFromWhitelist('<%= ip.ipAddress %>')" class="ip-btn">
                  <span>❌</span>
                  <span>Remove</span>
                </button>
              <% } %>
              
              <button onclick="addNote('<%= ip.ipAddress %>')" class="ip-btn note">
                <span>📝</span>
                <span>Note</span>
              </button>
            </div>
          </td>
        </tr>
      <% }); %>
    </tbody>
  </table>
<% } else { %>
  <div class="no-ips">
    <span class="no-ips-icon">🛡️</span>
    <h3>No IP addresses found</h3>
    <p>No IP addresses match your current filters.</p>
  </div>
<% } %>

<!-- Pagination -->
<% if (pagination.totalPages > 1) { %>
  <%- include('partials/pagination', { 
    currentPage: pagination.currentPage, 
    totalPages: pagination.totalPages,
    req: { query: filters }
  }) %>
<% } %>

<!-- Custom Retro Modals -->
<!-- IP Details Modal -->
<div class="retro-modal" id="ipDetailsModal">
  <div class="retro-modal-content">
    <div class="retro-modal-header">
      <h3 class="retro-modal-title">🛡️ IP Address Details</h3>
      <button class="retro-modal-close" onclick="closeModal('ipDetailsModal')">✕</button>
    </div>
    <div class="retro-modal-body" id="ipDetailsContent">
      <div style="text-align: center; padding: 20px;">
        <div style="color: #00ff00;">⏳ Loading IP details...</div>
      </div>
    </div>
  </div>
</div>

<!-- Action Modal -->
<div class="retro-modal" id="actionModal">
  <div class="retro-modal-content">
    <div class="retro-modal-header">
      <h3 class="retro-modal-title" id="actionModalTitle">Confirm Action</h3>
      <button class="retro-modal-close" onclick="closeModal('actionModal')">✕</button>
    </div>
    <div class="retro-modal-body">
      <div id="actionModalContent"></div>
    </div>
    <div class="retro-modal-footer">
      <button class="action-btn secondary" onclick="closeModal('actionModal')">Cancel</button>
      <button class="action-btn" id="confirmActionBtn">Confirm</button>
    </div>
  </div>
</div>

<script>
  // Global variables
  let selectedIPs = new Set();

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    updateBulkActions();
  });

  // Selection functions
  function toggleSelectAll() {
    const selectAll = document.getElementById('selectAll');
    const checkboxes = document.querySelectorAll('.ip-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectAll.checked;
      if (selectAll.checked) {
        selectedIPs.add(checkbox.value);
      } else {
        selectedIPs.delete(checkbox.value);
      }
    });
    
    updateBulkActions();
  }

  function updateBulkActions() {
    const checkboxes = document.querySelectorAll('.ip-checkbox:checked');
    selectedIPs.clear();
    
    checkboxes.forEach(checkbox => {
      selectedIPs.add(checkbox.value);
    });

    const bulkActions = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');
    
    selectedCount.textContent = `${selectedIPs.size} IPs selected`;
    
    if (selectedIPs.size > 0) {
      bulkActions.classList.add('show');
    }

    // Update select all checkbox state
    const allCheckboxes = document.querySelectorAll('.ip-checkbox');
    const selectAll = document.getElementById('selectAll');
    if (checkboxes.length === allCheckboxes.length && allCheckboxes.length > 0) {
      selectAll.checked = true;
      selectAll.indeterminate = false;
    } else if (checkboxes.length > 0) {
      selectAll.checked = false;
      selectAll.indeterminate = true;
    } else {
      selectAll.checked = false;
      selectAll.indeterminate = false;
    }
  }

  function toggleBulkActions() {
    const bulkActions = document.getElementById('bulkActions');
    bulkActions.classList.toggle('show');
  }

  function clearSelection() {
    document.querySelectorAll('.ip-checkbox').forEach(checkbox => {
      checkbox.checked = false;
      selectedIPs.delete(checkbox.value);
    });
    document.getElementById('selectAll').checked = false;
    updateBulkActions();
  }

  // Modal functions
  function showModal(modalId) {
    document.getElementById(modalId).classList.add('show');
  }

  function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
  }

  // IP Action functions
  function viewIPDetails(ipAddress) {
    showModal('ipDetailsModal');
    
    fetch(`/admin/ip-management/api/ip/${encodeURIComponent(ipAddress)}`)
      .then(response => response.json())
      .then(data => {
        document.getElementById('ipDetailsContent').innerHTML = generateIPDetailsHTML(data);
      })
      .catch(error => {
        document.getElementById('ipDetailsContent').innerHTML = 
          '<div style="color: #ff0000; text-align: center; padding: 20px;">❌ Error loading IP details: ' + error.message + '</div>';
      });
  }

  function generateIPDetailsHTML(ip) {
    const riskClass = ip.riskScore < 30 ? 'low' : ip.riskScore < 70 ? 'medium' : 'high';
    
    let html = `
      <div class="ip-details-grid">
        <div class="ip-details-section">
          <h4>📊 Basic Information</h4>
          <table class="ip-details-table">
            <tr><td>IP Address:</td><td><span class="ip-address">${ip.ipAddress}</span></td></tr>
            <tr><td>Status:</td><td><span class="ip-status ${ip.status}">${ip.status.charAt(0).toUpperCase() + ip.status.slice(1)}</span></td></tr>
            <tr><td>Risk Score:</td><td><span class="risk-score ${riskClass}">${ip.riskScore}</span></td></tr>
            <tr><td>Registrations:</td><td>${ip.registrationCount}</td></tr>
            <tr><td>First Seen:</td><td>${new Date(ip.firstSeen).toLocaleString()}</td></tr>
            <tr><td>Last Seen:</td><td>${new Date(ip.lastSeen).toLocaleString()}</td></tr>
          </table>
        </div>
        
        <div class="ip-details-section">
          <h4>📈 Analytics</h4>
          <table class="ip-details-table">
            <tr><td>Total Requests:</td><td>${ip.analytics?.totalRequests || 0}</td></tr>
            <tr><td>Failed Logins:</td><td>${ip.analytics?.failedLogins || 0}</td></tr>
            <tr><td>Successful Logins:</td><td>${ip.analytics?.successfulLogins || 0}</td></tr>
            <tr><td>Rate Limit Hits:</td><td>${ip.analytics?.rateLimitHits || 0}</td></tr>
          </table>
        </div>
      </div>
    `;

    if (ip.associatedUsers && ip.associatedUsers.length > 0) {
      html += `
        <div class="ip-details-section">
          <h4>👥 Associated Users (${ip.associatedUsers.length})</h4>
          <table class="ip-details-table">
            <tr style="color: #00ffff;"><td>Email</td><td>Name</td><td>Status</td><td>Registered</td></tr>
      `;
      
      ip.associatedUsers.forEach(user => {
        const statusColor = user.status === 'approved' ? '#00ff00' : user.status === 'pending' ? '#ffa500' : '#ff0000';
        html += `
          <tr>
            <td>${user.email}</td>
            <td>${user.name || 'N/A'}</td>
            <td style="color: ${statusColor};">${user.status}</td>
            <td>${new Date(user.createdAt).toLocaleDateString()}</td>
          </tr>
        `;
      });
      
      html += '</table></div>';
    }

    if (ip.analytics?.suspiciousPatterns && ip.analytics.suspiciousPatterns.length > 0) {
      html += `
        <div class="ip-details-section">
          <h4>⚠️ Suspicious Patterns</h4>
          <div class="pattern-badges">
      `;
      
      ip.analytics.suspiciousPatterns.forEach(pattern => {
        html += `<span class="pattern-badge ${pattern.severity}">${pattern.type} (${pattern.severity})</span>`;
      });
      
      html += '</div></div>';
    }

    if (ip.notes && ip.notes.length > 0) {
      html += `
        <div class="ip-details-section">
          <h4>📝 Notes</h4>
          <div class="notes-list">
      `;
      
      ip.notes.forEach(note => {
        html += `
          <div class="note-item">
            <div class="note-meta">${new Date(note.addedAt).toLocaleString()} by ${note.addedBy?.name || 'Unknown'}</div>
            <div class="note-content">${note.content}</div>
          </div>
        `;
      });
      
      html += '</div></div>';
    }

    return html;
  }

  function blockIP(ipAddress) {
    showActionModal('🚫 Block IP Address', `
      <p>Are you sure you want to block IP address <span class="ip-address">${ipAddress}</span>?</p>
      <label class="filter-label">Reason for blocking:</label>
      <input type="text" class="modal-input" id="blockReason" placeholder="Enter reason for blocking..." required>
    `, () => {
      const reason = document.getElementById('blockReason').value.trim();
      if (!reason) {
        showAlert('error', 'Please provide a reason for blocking this IP.');
        return;
      }
      
      executeIPAction('block', ipAddress, { reason });
    });
  }

  function unblockIP(ipAddress) {
    showActionModal('✅ Unblock IP Address', `
      <p>Are you sure you want to unblock IP address <span class="ip-address">${ipAddress}</span>?</p>
    `, () => {
      executeIPAction('unblock', ipAddress);
    });
  }

  function whitelistIP(ipAddress) {
    showActionModal('🛡️ Whitelist IP Address', `
      <p>Are you sure you want to whitelist IP address <span class="ip-address">${ipAddress}</span>?</p>
      <label class="filter-label">Reason for whitelisting:</label>
      <input type="text" class="modal-input" id="whitelistReason" placeholder="Enter reason for whitelisting..." required>
    `, () => {
      const reason = document.getElementById('whitelistReason').value.trim();
      if (!reason) {
        showAlert('error', 'Please provide a reason for whitelisting this IP.');
        return;
      }
      
      executeIPAction('whitelist', ipAddress, { reason });
    });
  }

  function removeFromWhitelist(ipAddress) {
    showActionModal('❌ Remove from Whitelist', `
      <p>Are you sure you want to remove IP address <span class="ip-address">${ipAddress}</span> from the whitelist?</p>
    `, () => {
      executeIPAction('remove-whitelist', ipAddress);
    });
  }

  function addNote(ipAddress) {
    showActionModal('📝 Add Note', `
      <label class="filter-label">Note:</label>
      <textarea class="modal-textarea" id="noteContent" placeholder="Enter note..." required></textarea>
    `, () => {
      const content = document.getElementById('noteContent').value.trim();
      if (!content) {
        showAlert('error', 'Please enter a note.');
        return;
      }
      
      executeIPAction('note', ipAddress, { content });
    });
  }

  // Bulk operations
  function executeBulkAction() {
    const action = document.getElementById('bulkAction').value;
    const reason = document.getElementById('bulkReason').value.trim();
    
    if (!action) {
      showAlert('error', 'Please select an action.');
      return;
    }
    
    if ((action === 'block' || action === 'whitelist') && !reason) {
      showAlert('error', 'Please provide a reason for this action.');
      return;
    }
    
    if (selectedIPs.size === 0) {
      showAlert('error', 'Please select at least one IP address.');
      return;
    }
    
    const ipArray = Array.from(selectedIPs);
    const actionText = action.replace('-', ' ');
    
    showActionModal(`⚡ Bulk ${actionText.charAt(0).toUpperCase() + actionText.slice(1)}`, `
      <p>Are you sure you want to ${actionText} <strong>${ipArray.length}</strong> IP address(es)?</p>
      <div style="background: rgba(0,0,0,0.5); padding: 10px; margin: 10px 0; max-height: 100px; overflow-y: auto;">
        ${ipArray.map(ip => `<div class="ip-address">${ip}</div>`).join('')}
      </div>
    `, () => {
      fetch(`/admin/ip-management/bulk/${action}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ipAddresses: ipArray,
          reason: reason
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert('success', data.message);
          setTimeout(() => location.reload(), 1500);
        } else {
          showAlert('error', data.message || 'Operation failed');
        }
      })
      .catch(error => {
        showAlert('error', 'Error executing bulk operation: ' + error.message);
      });
    });
  }

  // Utility functions
  function showActionModal(title, content, onConfirm) {
    document.getElementById('actionModalTitle').textContent = title;
    document.getElementById('actionModalContent').innerHTML = content;
    
    showModal('actionModal');
    
    const confirmBtn = document.getElementById('confirmActionBtn');
    confirmBtn.onclick = () => {
      onConfirm();
      closeModal('actionModal');
    };
  }

  function executeIPAction(action, ipAddress, data = {}) {
    const url = `/admin/ip-management/${action}/${encodeURIComponent(ipAddress)}`;
    
    fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
      if (result.success) {
        showAlert('success', result.message);
        setTimeout(() => location.reload(), 1500);
      } else {
        showAlert('error', result.message || 'Operation failed');
      }
    })
    .catch(error => {
      showAlert('error', 'Error: ' + error.message);
    });
  }

  function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert ${type}`;
    alertDiv.innerHTML = message;
    
    document.body.appendChild(alertDiv);
    
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.parentNode.removeChild(alertDiv);
      }
    }, 5000);
  }

  function refreshData() {
    location.reload();
  }

  function exportData() {
    const params = new URLSearchParams(window.location.search);
    window.open(`/admin/ip-management/export?${params.toString()}`, '_blank');
  }

  function migrateIPs() {
    showActionModal('💾 Migrate Existing IPs', `
      <p>This will migrate existing user registration IPs to the new IP management system.</p>
      <p style="color: #ffa500;">⚠️ This operation may take some time depending on the number of users.</p>
      <p>Continue with migration?</p>
    `, () => {
      fetch('/admin/ip-management/migrate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert('success', data.message);
          setTimeout(() => location.reload(), 2000);
        } else {
          showAlert('error', data.message || 'Migration failed');
        }
      })
      .catch(error => {
        showAlert('error', 'Error during migration: ' + error.message);
      });
    });
  }

  // Close modals when clicking outside
  window.onclick = function(event) {
    const modals = document.querySelectorAll('.retro-modal');
    modals.forEach(modal => {
      if (event.target === modal) {
        modal.classList.remove('show');
      }
    });
  }
</script>

<%- include('partials/adminLayoutFooter') %>

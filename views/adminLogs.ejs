<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Management - GamePlan Admin</title>
    <link rel="stylesheet" href="/admin-styles.css">
    <style>
        .logs-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .logs-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
        }
        
        .logs-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .stat-label {
            color: #7f8c8d;
            margin-top: 5px;
        }
        
        .logs-controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .controls-row {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .control-group label {
            font-weight: bold;
            color: #2c3e50;
            font-size: 0.9em;
        }
        
        .control-group select,
        .control-group input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .log-files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .log-type-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .log-type-header {
            background: #3498db;
            color: white;
            padding: 15px 20px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .log-type-header.error {
            background: #e74c3c;
        }
        
        .log-type-header.debug {
            background: #9b59b6;
        }
        
        .log-files-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .log-file-item {
            padding: 12px 20px;
            border-bottom: 1px solid #ecf0f1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .log-file-item:last-child {
            border-bottom: none;
        }
        
        .log-file-info {
            flex: 1;
        }
        
        .log-file-name {
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 4px;
        }
        
        .log-file-meta {
            font-size: 0.85em;
            color: #7f8c8d;
        }
        
        .log-file-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-small {
            padding: 4px 8px;
            font-size: 0.8em;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-view {
            background: #3498db;
            color: white;
        }
        
        .btn-download {
            background: #27ae60;
            color: white;
        }
        
        .btn-view:hover {
            background: #2980b9;
        }
        
        .btn-download:hover {
            background: #229954;
        }
        
        .admin-actions {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .admin-actions h3 {
            margin-top: 0;
            color: #2c3e50;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 10px;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn-danger {
            background: #e74c3c;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .btn-danger:hover {
            background: #c0392b;
        }
        
        .btn-warning {
            background: #f39c12;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .btn-warning:hover {
            background: #e67e22;
        }
        
        .no-logs {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        .log-viewer {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 500px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-break: break-all;
            margin-top: 20px;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: #000;
        }
        
        @media (max-width: 768px) {
            .logs-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .controls-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .log-files-grid {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/adminLayoutHeader') %>
    
    <div class="logs-container">
        <div class="logs-header">
            <div>
                <h1>Log Management</h1>
                <p>View, download, and manage application logs</p>
            </div>
            <div>
                <button onclick="refreshLogs()" class="btn-warning">Refresh</button>
            </div>
        </div>
        
        <!-- Log Statistics -->
        <div class="logs-stats">
            <div class="stat-card">
                <div class="stat-value"><%= stats.totalFiles %></div>
                <div class="stat-label">Total Log Files</div>
            </div>
            <div class="stat-card">
                <div class="stat-value"><%= stats.totalSizeFormatted %></div>
                <div class="stat-label">Total Size</div>
            </div>
            <div class="stat-card">
                <div class="stat-value"><%= stats.directories.application?.files || 0 %></div>
                <div class="stat-label">Application Logs</div>
            </div>
            <div class="stat-card">
                <div class="stat-value"><%= stats.directories.errors?.files || 0 %></div>
                <div class="stat-label">Error Logs</div>
            </div>
        </div>
        
        <!-- Log Controls -->
        <div class="logs-controls">
            <div class="controls-row">
                <div class="control-group">
                    <label for="logType">Log Type:</label>
                    <select id="logType" onchange="filterLogs()">
                        <option value="all">All Types</option>
                        <option value="app">Application</option>
                        <option value="error">Errors</option>
                        <option value="debug">Debug</option>
                    </select>
                </div>
                <div class="control-group">
                    <label for="logDate">Date:</label>
                    <input type="date" id="logDate" onchange="filterLogs()" value="<%= new Date().toISOString().split('T')[0] %>">
                </div>
                <div class="control-group">
                    <label>&nbsp;</label>
                    <button onclick="downloadAllLogs()" class="btn-download">Download All</button>
                </div>
            </div>
        </div>
        
        <!-- Log Files Grid -->
        <div class="log-files-grid">
            <!-- Application Logs -->
            <div class="log-type-section">
                <div class="log-type-header">
                    <span>Application Logs</span>
                    <span><%= stats.directories.application?.sizeFormatted || '0 Bytes' %></span>
                </div>
                <div class="log-files-list" id="app-logs">
                    <% if (logFiles.app && logFiles.app.length > 0) { %>
                        <% logFiles.app.forEach(file => { %>
                            <div class="log-file-item">
                                <div class="log-file-info">
                                    <div class="log-file-name"><%= file.name %></div>
                                    <div class="log-file-meta">
                                        <%= file.sizeFormatted %> • 
                                        <%= new Date(file.modified).toLocaleString() %>
                                    </div>
                                </div>
                                <div class="log-file-actions">
                                    <button onclick="viewLog('app', '<%= file.name %>')" class="btn-small btn-view">View</button>
                                    <a href="/admin/logs/download/<%= file.name.split('-')[1]?.split('.')[0] || 'latest' %>/app" class="btn-small btn-download">Download</a>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="no-logs">No application logs found</div>
                    <% } %>
                </div>
            </div>
            
            <!-- Error Logs -->
            <div class="log-type-section">
                <div class="log-type-header error">
                    <span>Error Logs</span>
                    <span><%= stats.directories.errors?.sizeFormatted || '0 Bytes' %></span>
                </div>
                <div class="log-files-list" id="error-logs">
                    <% if (logFiles.error && logFiles.error.length > 0) { %>
                        <% logFiles.error.forEach(file => { %>
                            <div class="log-file-item">
                                <div class="log-file-info">
                                    <div class="log-file-name"><%= file.name %></div>
                                    <div class="log-file-meta">
                                        <%= file.sizeFormatted %> • 
                                        <%= new Date(file.modified).toLocaleString() %>
                                    </div>
                                </div>
                                <div class="log-file-actions">
                                    <button onclick="viewLog('error', '<%= file.name %>')" class="btn-small btn-view">View</button>
                                    <a href="/admin/logs/download/<%= file.name.split('-')[1]?.split('.')[0] || 'latest' %>/error" class="btn-small btn-download">Download</a>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="no-logs">No error logs found</div>
                    <% } %>
                </div>
            </div>
            
            <!-- Debug Logs (if available) -->
            <% if (stats.directories.debug && stats.directories.debug.files > 0) { %>
            <div class="log-type-section">
                <div class="log-type-header debug">
                    <span>Debug Logs</span>
                    <span><%= stats.directories.debug?.sizeFormatted || '0 Bytes' %></span>
                </div>
                <div class="log-files-list" id="debug-logs">
                    <% if (logFiles.debug && logFiles.debug.length > 0) { %>
                        <% logFiles.debug.forEach(file => { %>
                            <div class="log-file-item">
                                <div class="log-file-info">
                                    <div class="log-file-name"><%= file.name %></div>
                                    <div class="log-file-meta">
                                        <%= file.sizeFormatted %> • 
                                        <%= new Date(file.modified).toLocaleString() %>
                                    </div>
                                </div>
                                <div class="log-file-actions">
                                    <button onclick="viewLog('debug', '<%= file.name %>')" class="btn-small btn-view">View</button>
                                    <a href="/admin/logs/download/<%= file.name.split('-')[1]?.split('.')[0] || 'latest' %>/debug" class="btn-small btn-download">Download</a>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="no-logs">No debug logs found</div>
                    <% } %>
                </div>
            </div>
            <% } %>
        </div>
        
        <!-- Admin Actions -->
        <% if (user.isSuperAdmin) { %>
        <div class="admin-actions">
            <h3>Administrative Actions</h3>
            <div class="action-buttons">
                <button onclick="cleanupOldLogs()" class="btn-warning">Cleanup Old Logs (30+ days)</button>
                <button onclick="confirmClearAllLogs()" class="btn-danger">Clear All Logs</button>
            </div>
        </div>
        <% } %>
    </div>
    
    <!-- Log Viewer Modal -->
    <div id="logModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Log Viewer</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div id="logContent" class="log-viewer">
                Loading...
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let currentLogType = 'all';
        let currentDate = '<%= new Date().toISOString().split("T")[0] %>';
        
        // Filter logs based on type and date
        function filterLogs() {
            currentLogType = document.getElementById('logType').value;
            currentDate = document.getElementById('logDate').value;
            
            // Show/hide log sections based on type
            const sections = document.querySelectorAll('.log-type-section');
            sections.forEach(section => {
                const sectionType = section.querySelector('.log-type-header span').textContent.toLowerCase();
                if (currentLogType === 'all' || sectionType.includes(currentLogType)) {
                    section.style.display = 'block';
                } else {
                    section.style.display = 'none';
                }
            });
            
            // If date is selected, filter files by date
            if (currentDate) {
                filterFilesByDate(currentDate);
            }
        }
        
        // Filter files by date
        function filterFilesByDate(date) {
            const fileItems = document.querySelectorAll('.log-file-item');
            fileItems.forEach(item => {
                const fileName = item.querySelector('.log-file-name').textContent;
                if (fileName.includes(date)) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }
        
        // View log file content
        async function viewLog(type, fileName) {
            const modal = document.getElementById('logModal');
            const title = document.getElementById('modalTitle');
            const content = document.getElementById('logContent');
            
            title.textContent = `${type.toUpperCase()} Log: ${fileName}`;
            content.textContent = 'Loading...';
            modal.style.display = 'block';
            
            try {
                const response = await fetch(`/admin/logs/view/${fileName}/${type}`);
                if (response.ok) {
                    const logData = await response.text();
                    content.textContent = logData;
                } else {
                    content.textContent = 'Error loading log file: ' + response.statusText;
                }
            } catch (error) {
                content.textContent = 'Error loading log file: ' + error.message;
            }
        }
        
        // Close modal
        function closeModal() {
            document.getElementById('logModal').style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('logModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Refresh logs
        function refreshLogs() {
            window.location.reload();
        }
        
        // Download all logs as ZIP
        function downloadAllLogs() {
            window.location.href = '/admin/logs/download-all';
        }
        
        // Cleanup old logs
        async function cleanupOldLogs() {
            if (!confirm('This will delete log files older than 30 days. Continue?')) {
                return;
            }
            
            try {
                const response = await fetch('/admin/logs/cleanup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                if (result.success) {
                    alert(`Cleanup completed: ${result.deletedFiles} files deleted, ${result.freedSpaceFormatted} freed`);
                    refreshLogs();
                } else {
                    alert('Cleanup failed: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Cleanup failed: ' + error.message);
            }
        }
        
        // Confirm clear all logs
        function confirmClearAllLogs() {
            if (!confirm('WARNING: This will delete ALL log files permanently. This action cannot be undone. Continue?')) {
                return;
            }
            
            if (!confirm('Are you absolutely sure? This will delete ALL application logs, error logs, and debug logs.')) {
                return;
            }
            
            clearAllLogs();
        }
        
        // Clear all logs
        async function clearAllLogs() {
            try {
                const response = await fetch('/admin/logs/clear-all', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                if (result.success) {
                    alert(`All logs cleared: ${result.deletedFiles} files deleted, ${result.freedSpaceFormatted} freed`);
                    refreshLogs();
                } else {
                    alert('Clear all failed: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Clear all failed: ' + error.message);
            }
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            filterLogs();
        });
    </script>
    
    <%- include('partials/adminLayoutFooter') %>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>New Event - GamePlan</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="scanlines"></div>
  <header>
    <h1>GamePlan</h1>
    <nav>
      <% if (typeof user !== 'undefined') { %>
        <a href="/profile">Profile</a>
        <a href="/logout">Logout</a>
        <a href="/">Home</a>
        <p>Welcome, <%= user.gameNickname ? user.gameNickname : user.name %></p>
      <% } else { %>
        <a href="/register">Register</a>
        <a href="/login">Login</a>
        <a href="/">Home</a>
      <% } %>
    </nav>
  </header>
  
  <main>
    <% if (typeof user === 'undefined' || !user) { %>
      <div class="auth-required">
        <h2>üéÆ Authentication Required</h2>
        <p>You need to <a href="/login">log in</a> to create events.</p>
        <div class="auth-actions">
          <a href="/login" class="action-button primary">Login</a>
          <a href="/register" class="action-button secondary">Register</a>
        </div>
      </div>
    <% } else { %>
      <div class="event-wizard">
        <!-- Progress Indicator -->
        <div class="wizard-progress">
          <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="progress-steps">
            <div class="step active" data-step="1">
              <div class="step-number">1</div>
              <div class="step-label">Event Details</div>
            </div>
            <div class="step" data-step="2">
              <div class="step-number">2</div>
              <div class="step-label">Choose Game</div>
            </div>
            <div class="step" data-step="3">
              <div class="step-number">3</div>
              <div class="step-label">Platforms</div>
            </div>
            <div class="step" data-step="4">
              <div class="step-number">4</div>
              <div class="step-label">Review</div>
            </div>
          </div>
        </div>

        <form action="/event/new" method="POST" id="eventForm">
          <!-- Step 1: Event Details -->
          <div class="wizard-step active" id="step1">
            <div class="step-header">
              <h2>üéØ Event Details</h2>
              <p>Let's start with the basics of your gaming event</p>
            </div>
            
            <div class="form-section">
              <div class="input-group">
                <label for="eventName">Event Name</label>
                <input type="text" id="eventName" name="name" required 
                       placeholder="e.g., Friday Night Raids, Weekend Tournament">
                <div class="input-hint">Give your event a catchy name that describes what you're doing</div>
              </div>

              <div class="input-group">
                <label for="eventDescription">Description</label>
                <textarea id="eventDescription" name="description" required 
                          placeholder="Tell players what to expect, any special rules, or requirements..."></textarea>
                <div class="input-hint">
                  <span>Help players understand what your event is about</span>
                  <span class="char-counter" id="descriptionCounter">0/10 characters minimum</span>
                </div>
                <div class="validation-message" id="descriptionValidation" style="display: none;"></div>
              </div>

              <div class="form-row">
                <div class="input-group">
                  <label for="playerLimit">Max Players</label>
                  <input type="number" id="playerLimit" name="playerLimit" required 
                         min="2" max="100" value="4">
                  <div class="input-hint">Including yourself</div>
                </div>

                <div class="input-group">
                  <label for="eventDate">Date & Time</label>
                  <input type="datetime-local" id="eventDate" name="date" required>
                  <div class="input-hint">When does your event start?</div>
                </div>
              </div>
            </div>

            <div class="step-actions">
              <button type="button" class="action-button primary" onclick="nextStep()">
                Next: Choose Game ‚Üí
              </button>
            </div>
          </div>

          <!-- Step 2: Game Selection -->
          <div class="wizard-step" id="step2">
            <div class="step-header">
              <h2>üéÆ Choose Your Game</h2>
              <p>Search for the game you want to play</p>
            </div>

            <div class="form-section">
              <div class="game-search-container">
                <div class="search-box">
                  <input type="text" id="gameSearch" placeholder="Search for any game..." autocomplete="off">
                  <div class="search-icon">üîç</div>
                </div>
                
                <div class="search-results" id="searchResults">
                  <div class="search-placeholder">
                    <div class="placeholder-icon">üéÆ</div>
                    <h3>Start typing to search</h3>
                    <p>We'll search Steam, RAWG, and our game database</p>
                  </div>
                </div>

                <div class="selected-game" id="selectedGame" style="display: none;">
                  <div class="game-card selected">
                    <div class="game-image">
                      <img id="selectedGameImage" src="" alt="">
                    </div>
                    <div class="game-info">
                      <h3 id="selectedGameName"></h3>
                      <p id="selectedGameDescription"></p>
                      <div class="game-meta">
                        <span class="game-source" id="selectedGameSource"></span>
                        <span class="game-platforms" id="selectedGamePlatforms"></span>
                      </div>
                    </div>
                    <button type="button" class="change-game-btn" onclick="changeGame()">Change</button>
                  </div>
                </div>

                <div class="manual-game-option">
                  <button type="button" class="action-button secondary" id="addManualGameBtn" onclick="showManualGameForm()">
                    Can't find your game? Add it manually
                  </button>
                </div>

                <!-- Manual Game Form -->
                <div class="manual-game-form" id="manualGameForm" style="display: none;">
                  <div class="form-section">
                    <h3>Add Game Manually</h3>
                    <div class="warning-box">
                      <p><strong>Note:</strong> Manually added games require admin approval before your event becomes visible.</p>
                    </div>

                    <div class="input-group">
                      <label for="manualGameName">Game Name</label>
                      <input type="text" id="manualGameName" name="manualGameName" 
                             placeholder="Enter the exact game name">
                    </div>

                    <div class="input-group">
                      <label for="manualGameDescription">Game Description</label>
                      <textarea id="manualGameDescription" name="manualGameDescription" 
                                placeholder="Brief description of the game"></textarea>
                    </div>

                    <div class="input-group">
                      <label>Game Categories</label>
                      <div class="category-grid">
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Action">
                          <span>Action</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Adventure">
                          <span>Adventure</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Strategy">
                          <span>Strategy</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="RPG">
                          <span>RPG</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="FPS">
                          <span>FPS</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Racing">
                          <span>Racing</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Sports">
                          <span>Sports</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Simulation">
                          <span>Simulation</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Puzzle">
                          <span>Puzzle</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Horror">
                          <span>Horror</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Indie">
                          <span>Indie</span>
                        </label>
                        <label class="category-option">
                          <input type="checkbox" name="manualGameCategories" value="Other">
                          <span>Other</span>
                        </label>
                      </div>
                    </div>

                    <div class="manual-actions">
                      <button type="button" class="action-button secondary" onclick="hideManualGameForm()">Cancel</button>
                      <button type="button" class="action-button primary" onclick="selectManualGame()">Use This Game</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="step-actions">
              <button type="button" class="action-button secondary" onclick="prevStep()">
                ‚Üê Back
              </button>
              <button type="button" class="action-button primary" id="nextToStep3" onclick="nextStep()" disabled>
                Next: Platforms ‚Üí
              </button>
            </div>
          </div>

          <!-- Step 3: Platforms & Extensions -->
          <div class="wizard-step" id="step3">
            <div class="step-header">
              <h2>üéØ Platforms & Setup</h2>
              <p>Select platforms and any required extensions</p>
            </div>

            <div class="form-section">
              <div class="input-group">
                <label>Gaming Platforms</label>
                <div class="platform-grid">
                  <label class="platform-option">
                    <input type="checkbox" name="platforms" value="PC">
                    <div class="platform-card">
                      <div class="platform-icon">üíª</div>
                      <span>PC</span>
                    </div>
                  </label>
                  <label class="platform-option">
                    <input type="checkbox" name="platforms" value="PlayStation">
                    <div class="platform-card">
                      <div class="platform-icon">üéÆ</div>
                      <span>PlayStation</span>
                    </div>
                  </label>
                  <label class="platform-option">
                    <input type="checkbox" name="platforms" value="Xbox">
                    <div class="platform-card">
                      <div class="platform-icon">üéÆ</div>
                      <span>Xbox</span>
                    </div>
                  </label>
                  <label class="platform-option">
                    <input type="checkbox" name="platforms" value="Nintendo Switch">
                    <div class="platform-card">
                      <div class="platform-icon">üéÆ</div>
                      <span>Switch</span>
                    </div>
                  </label>
                </div>
                <div class="input-hint">Select all platforms where players can join</div>
              </div>

              <div class="extensions-section">
                <div class="extensions-toggle">
                  <label class="toggle-option">
                    <input type="checkbox" id="hasExtensions">
                    <span>This event requires extensions/mods</span>
                  </label>
                </div>

                <div class="extensions-form" id="extensionsForm" style="display: none;">
                  <div class="extensions-list" id="extensionsList">
                    <div class="extension-item">
                      <div class="input-group">
                        <label>Extension Name</label>
                        <input type="text" name="extension-name" placeholder="e.g., Better UI Mod">
                      </div>
                      <div class="input-group">
                        <label>Download Link</label>
                        <input type="url" name="extension-link" placeholder="https://...">
                      </div>
                      <div class="input-group">
                        <label>Install Time (minutes)</label>
                        <input type="number" name="extension-time" placeholder="5" min="1">
                      </div>
                    </div>
                  </div>
                  <button type="button" class="action-button secondary" onclick="addExtension()">
                    + Add Another Extension
                  </button>
                </div>
              </div>
            </div>

            <div class="step-actions">
              <button type="button" class="action-button secondary" onclick="prevStep()">
                ‚Üê Back
              </button>
              <button type="button" class="action-button primary" onclick="nextStep()">
                Next: Review ‚Üí
              </button>
            </div>
          </div>

          <!-- Step 4: Review & Create -->
          <div class="wizard-step" id="step4">
            <div class="step-header">
              <h2>‚úÖ Review Your Event</h2>
              <p>Everything look good? Let's create your event!</p>
            </div>

            <div class="form-section">
              <div class="review-card">
                <div class="review-section">
                  <h3>Event Details</h3>
                  <div class="review-item">
                    <span class="label">Name:</span>
                    <span class="value" id="reviewEventName"></span>
                  </div>
                  <div class="review-item">
                    <span class="label">Description:</span>
                    <span class="value" id="reviewEventDescription"></span>
                  </div>
                  <div class="review-item">
                    <span class="label">Players:</span>
                    <span class="value" id="reviewPlayerLimit"></span>
                  </div>
                  <div class="review-item">
                    <span class="label">Date & Time:</span>
                    <span class="value" id="reviewEventDate"></span>
                  </div>
                </div>

                <div class="review-section">
                  <h3>Game</h3>
                  <div class="review-game" id="reviewGame"></div>
                </div>

                <div class="review-section">
                  <h3>Platforms</h3>
                  <div class="review-platforms" id="reviewPlatforms"></div>
                </div>

                <div class="review-section" id="reviewExtensionsSection" style="display: none;">
                  <h3>Required Extensions</h3>
                  <div class="review-extensions" id="reviewExtensions"></div>
                </div>
              </div>
            </div>

            <div class="step-actions">
              <button type="button" class="action-button secondary" onclick="prevStep()">
                ‚Üê Back to Edit
              </button>
              <button type="submit" class="action-button primary create-event-btn">
                üöÄ Create Event
              </button>
            </div>
          </div>

          <!-- Hidden fields for form submission -->
          <input type="hidden" id="finalGameSelection" name="gameSelection" required>
          <input type="hidden" id="finalExtensions" name="extensions">
        </form>
      </div>
    <% } %>
  </main>

  <script>
    // Wizard state management
    let currentStep = 1;
    let selectedGameData = null;
    let searchTimeout;

    // Initialize the form
    document.addEventListener('DOMContentLoaded', function() {
      setDefaultDateTime();
      updateProgress();
      
      // Game search functionality
      const gameSearch = document.getElementById('gameSearch');
      if (gameSearch) {
        gameSearch.addEventListener('input', handleGameSearch);
      }

      // Extensions toggle
      const hasExtensions = document.getElementById('hasExtensions');
      if (hasExtensions) {
        hasExtensions.addEventListener('change', toggleExtensions);
      }

      // Form validation
      setupFormValidation();
      
      // Description character counter
      setupDescriptionValidation();
    });

    // Set default date/time to 1 hour from now
    function setDefaultDateTime() {
      const now = new Date();
      const oneHourLater = new Date(now.getTime() + (60 * 60 * 1000));
      
      const year = oneHourLater.getFullYear();
      const month = String(oneHourLater.getMonth() + 1).padStart(2, '0');
      const day = String(oneHourLater.getDate()).padStart(2, '0');
      const hours = String(oneHourLater.getHours()).padStart(2, '0');
      const minutes = String(oneHourLater.getMinutes()).padStart(2, '0');
      
      const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
      document.getElementById('eventDate').value = formattedDateTime;
    }

    // Navigation functions
    function nextStep() {
      if (validateCurrentStep()) {
        if (currentStep < 4) {
          currentStep++;
          showStep(currentStep);
          updateProgress();
          
          if (currentStep === 4) {
            updateReview();
          }
        }
      }
    }

    function prevStep() {
      if (currentStep > 1) {
        currentStep--;
        showStep(currentStep);
        updateProgress();
      }
    }

    function showStep(step) {
      // Hide all steps
      document.querySelectorAll('.wizard-step').forEach(s => s.classList.remove('active'));
      document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
      
      // Show current step
      document.getElementById(`step${step}`).classList.add('active');
      document.querySelector(`[data-step="${step}"]`).classList.add('active');
      
      // Scroll to top
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    function updateProgress() {
      const progress = (currentStep / 4) * 100;
      document.getElementById('progressFill').style.width = `${progress}%`;
    }

    // Validation functions
    function validateCurrentStep() {
      switch (currentStep) {
        case 1:
          return validateStep1();
        case 2:
          return validateStep2();
        case 3:
          return validateStep3();
        default:
          return true;
      }
    }

    function validateStep1() {
      const name = document.getElementById('eventName').value.trim();
      const description = document.getElementById('eventDescription').value.trim();
      const playerLimit = document.getElementById('playerLimit').value;
      const date = document.getElementById('eventDate').value;

      if (!name) {
        showError('Please enter an event name');
        return false;
      }
      if (!description) {
        showError('Please enter an event description');
        return false;
      }
      if (description.length < 10) {
        showError('Event description must be at least 10 characters long');
        return false;
      }
      if (!playerLimit || playerLimit < 2) {
        showError('Player limit must be at least 2');
        return false;
      }
      if (!date) {
        showError('Please select a date and time');
        return false;
      }

      const eventDate = new Date(date);
      const now = new Date();
      if (eventDate <= now) {
        showError('Event date must be in the future');
        return false;
      }

      return true;
    }

    function validateStep2() {
      if (!selectedGameData) {
        showError('Please select a game for your event');
        return false;
      }
      return true;
    }

    function validateStep3() {
      const platforms = document.querySelectorAll('input[name="platforms"]:checked');
      if (platforms.length === 0) {
        showError('Please select at least one platform');
        return false;
      }
      return true;
    }

    // Game search functionality
    function handleGameSearch() {
      const query = this.value.trim();
      const resultsContainer = document.getElementById('searchResults');
      
      if (query.length < 2) {
        showSearchPlaceholder();
        return;
      }
      
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        searchGames(query);
      }, 300);
    }

    async function searchGames(query) {
      const resultsContainer = document.getElementById('searchResults');
      resultsContainer.innerHTML = '<div class="loading">üîç Searching games...</div>';
      
      try {
        // Search Steam games
        const steamResponse = await fetch(`/api/steam/search?q=${encodeURIComponent(query)}`);
        const steamGames = await steamResponse.json();
        
        // Search RAWG games
        const rawgResponse = await fetch(`/api/rawg/search?q=${encodeURIComponent(query)}`);
        const rawgGames = await rawgResponse.json();
        
        // Search existing games
        const existingGames = (<%- JSON.stringify(games || []) %> || []).filter(game => 
          game.name && game.name.toLowerCase().includes(query.toLowerCase()) && game.status === 'approved'
        );
        
        displaySearchResults(steamGames, rawgGames, existingGames);
      } catch (error) {
        console.error('Error searching games:', error);
        resultsContainer.innerHTML = '<div class="error">‚ùå Error searching games. Please try again.</div>';
      }
    }

    function displaySearchResults(steamGames, rawgGames, existingGames) {
      const resultsContainer = document.getElementById('searchResults');
      let html = '';
      
      // Combine and deduplicate results
      const allGames = [];
      
      // Add existing games first (highest priority)
      existingGames.forEach(game => {
        allGames.push({
          type: 'existing',
          id: game._id,
          name: game.name,
          description: game.description || 'No description available',
          image: game.steamData?.header_image || game.rawgData?.background_image || null,
          source: 'Database',
          platforms: game.platforms || [],
          data: game
        });
      });
      
      // Add Steam games (prefer over RAWG)
      steamGames.forEach(game => {
        if (!game.existsInDatabase) {
          allGames.push({
            type: 'steam',
            id: game.appid,
            name: game.name,
            description: game.short_description || 'No description available',
            image: game.header_image,
            source: 'Steam',
            platforms: ['PC'],
            data: game
          });
        }
      });
      
      // Add RAWG games (lowest priority)
      rawgGames.forEach(game => {
        if (!game.existsInDatabase && !game.hasSteamEquivalent) {
          allGames.push({
            type: 'rawg',
            id: game.id,
            name: game.name,
            description: game.short_description || 'No description available',
            image: game.background_image,
            source: 'RAWG',
            platforms: game.platforms || [],
            data: game
          });
        }
      });
      
      if (allGames.length === 0) {
        html = `
          <div class="no-results">
            <div class="no-results-icon">üòî</div>
            <h3>No games found</h3>
            <p>Try a different search term or add your game manually</p>
          </div>
        `;
      } else {
        html = '<div class="search-results-list">';
        allGames.slice(0, 10).forEach(game => {
          html += `
            <div class="game-card simple-title" onclick="selectGame(${JSON.stringify(game).replace(/"/g, '&quot;')})">
              <div class="game-title-only">
                ${game.name}
              </div>
            </div>
          `;
        });
        html += '</div>';
      }
      
      resultsContainer.innerHTML = html;
    }

    function showSearchPlaceholder() {
      const resultsContainer = document.getElementById('searchResults');
      resultsContainer.innerHTML = `
        <div class="search-placeholder">
          <div class="placeholder-icon">üéÆ</div>
          <h3>Start typing to search</h3>
          <p>We'll search Steam, RAWG, and our game database</p>
        </div>
      `;
    }

    function selectGame(gameData) {
      selectedGameData = {
        type: gameData.type,
        data: gameData.data
      };
      
      if (gameData.type === 'existing') {
        selectedGameData.gameId = gameData.id;
      }
      
      // Update UI
      document.getElementById('selectedGameName').textContent = gameData.name;
      document.getElementById('selectedGameDescription').textContent = gameData.description;
      document.getElementById('selectedGameSource').textContent = gameData.source;
      document.getElementById('selectedGamePlatforms').textContent = gameData.platforms.join(', ');
      
      if (gameData.image) {
        document.getElementById('selectedGameImage').src = gameData.image;
        document.getElementById('selectedGameImage').style.display = 'block';
      } else {
        document.getElementById('selectedGameImage').style.display = 'none';
      }
      
      // Show selected game, hide search
      document.getElementById('searchResults').style.display = 'none';
      document.getElementById('selectedGame').style.display = 'block';
      document.getElementById('gameSearch').style.display = 'none';
      
      // Enable next button
      document.getElementById('nextToStep3').disabled = false;
      
      // Auto-suggest platforms based on game
      suggestPlatforms(gameData.platforms);
    }

    function changeGame() {
      selectedGameData = null;
      document.getElementById('searchResults').style.display = 'block';
      document.getElementById('selectedGame').style.display = 'none';
      document.getElementById('gameSearch').style.display = 'block';
      document.getElementById('gameSearch').value = '';
      document.getElementById('nextToStep3').disabled = true;
      showSearchPlaceholder();
    }

    function suggestPlatforms(gamePlatforms) {
      // Auto-check platforms based on the selected game
      const platformCheckboxes = document.querySelectorAll('input[name="platforms"]');
      platformCheckboxes.forEach(checkbox => {
        checkbox.checked = false; // Reset all
      });
      
      // Check matching platforms
      gamePlatforms.forEach(platform => {
        const checkbox = document.querySelector(`input[name="platforms"][value="${platform}"]`);
        if (checkbox) {
          checkbox.checked = true;
        }
      });
      
      // If no matches, suggest PC as default
      if (gamePlatforms.length === 0) {
        const pcCheckbox = document.querySelector('input[name="platforms"][value="PC"]');
        if (pcCheckbox) {
          pcCheckbox.checked = true;
        }
      }
    }

    // Manual game functions
    function showManualGameForm() {
      document.getElementById('manualGameForm').style.display = 'block';
      document.getElementById('addManualGameBtn').style.display = 'none';
    }

    function hideManualGameForm() {
      document.getElementById('manualGameForm').style.display = 'none';
      document.getElementById('addManualGameBtn').style.display = 'block';
      
      // Clear form
      document.getElementById('manualGameName').value = '';
      document.getElementById('manualGameDescription').value = '';
      document.querySelectorAll('input[name="manualGameCategories"]').forEach(cb => cb.checked = false);
    }

    function selectManualGame() {
      const name = document.getElementById('manualGameName').value.trim();
      const description = document.getElementById('manualGameDescription').value.trim();
      const categories = Array.from(document.querySelectorAll('input[name="manualGameCategories"]:checked')).map(cb => cb.value);
      
      if (!name) {
        showError('Please enter a game name');
        return;
      }
      if (!description) {
        showError('Please enter a game description');
        return;
      }
      if (categories.length === 0) {
        showError('Please select at least one category');
        return;
      }
      
      selectedGameData = {
        type: 'manual',
        data: {
          name,
          description,
          categories,
          tags: []
        }
      };
      
      // Update UI
      document.getElementById('selectedGameName').textContent = name;
      document.getElementById('selectedGameDescription').textContent = description;
      document.getElementById('selectedGameSource').textContent = 'Manual Entry (Pending Approval)';
      document.getElementById('selectedGamePlatforms').textContent = categories.join(', ');
      document.getElementById('selectedGameImage').style.display = 'none';
      
      // Show selected game, hide manual form
      document.getElementById('manualGameForm').style.display = 'none';
      document.getElementById('selectedGame').style.display = 'block';
      document.getElementById('gameSearch').style.display = 'none';
      document.getElementById('addManualGameBtn').style.display = 'none';
      
      // Enable next button
      document.getElementById('nextToStep3').disabled = false;
    }

    // Extensions functions
    function toggleExtensions() {
      const extensionsForm = document.getElementById('extensionsForm');
      const hasExtensions = document.getElementById('hasExtensions');
      
      if (hasExtensions.checked) {
        extensionsForm.style.display = 'block';
      } else {
        extensionsForm.style.display = 'none';
      }
    }

    function addExtension() {
      const extensionsList = document.getElementById('extensionsList');
      const newExtension = document.createElement('div');
      newExtension.className = 'extension-item';
      newExtension.innerHTML = `
        <div class="input-group">
          <label>Extension Name</label>
          <input type="text" name="extension-name" placeholder="e.g., Better UI Mod">
        </div>
        <div class="input-group">
          <label>Download Link</label>
          <input type="url" name="extension-link" placeholder="https://...">
        </div>
        <div class="input-group">
          <label>Install Time (minutes)</label>
          <input type="number" name="extension-time" placeholder="5" min="1">
        </div>
        <button type="button" class="remove-extension-btn" onclick="removeExtension(this)">Remove</button>
      `;
      extensionsList.appendChild(newExtension);
    }

    function removeExtension(button) {
      button.parentElement.remove();
    }

    // Review functions
    function updateReview() {
      // Update event details
      document.getElementById('reviewEventName').textContent = document.getElementById('eventName').value;
      document.getElementById('reviewEventDescription').textContent = document.getElementById('eventDescription').value;
      document.getElementById('reviewPlayerLimit').textContent = document.getElementById('playerLimit').value + ' players';
      
      const eventDate = new Date(document.getElementById('eventDate').value);
      document.getElementById('reviewEventDate').textContent = eventDate.toLocaleString();
      
      // Update game info
      if (selectedGameData) {
        const gameHtml = `
          <div class="review-game-card">
            <h4>${selectedGameData.data.name || selectedGameData.data.name}</h4>
            <p>${selectedGameData.data.description || selectedGameData.data.short_description || 'No description'}</p>
            <span class="game-source-badge">${getGameSourceLabel(selectedGameData.type)}</span>
          </div>
        `;
        document.getElementById('reviewGame').innerHTML = gameHtml;
      }
      
      // Update platforms
      const selectedPlatforms = Array.from(document.querySelectorAll('input[name="platforms"]:checked')).map(cb => cb.value);
      const platformsHtml = selectedPlatforms.map(platform => `<span class="platform-badge">${platform}</span>`).join('');
      document.getElementById('reviewPlatforms').innerHTML = platformsHtml;
      
      // Update extensions
      const hasExtensions = document.getElementById('hasExtensions').checked;
      if (hasExtensions) {
        const extensions = Array.from(document.querySelectorAll('.extension-item')).map(item => {
          const name = item.querySelector('input[name="extension-name"]').value;
          const link = item.querySelector('input[name="extension-link"]').value;
          const time = item.querySelector('input[name="extension-time"]').value;
          return { name, link, time };
        }).filter(ext => ext.name && ext.link && ext.time);
        
        if (extensions.length > 0) {
          const extensionsHtml = extensions.map(ext => `
            <div class="review-extension">
              <strong>${ext.name}</strong> - ${ext.time} minutes
              <br><small>${ext.link}</small>
            </div>
          `).join('');
          document.getElementById('reviewExtensions').innerHTML = extensionsHtml;
          document.getElementById('reviewExtensionsSection').style.display = 'block';
        } else {
          document.getElementById('reviewExtensionsSection').style.display = 'none';
        }
      } else {
        document.getElementById('reviewExtensionsSection').style.display = 'none';
      }
      
      // Prepare form data for submission
      prepareFormSubmission();
    }

    function getGameSourceLabel(type) {
      switch (type) {
        case 'steam': return 'Steam';
        case 'rawg': return 'RAWG';
        case 'existing': return 'Database';
        case 'manual': return 'Manual Entry';
        default: return 'Unknown';
      }
    }

    function prepareFormSubmission() {
      // Set game selection data
      document.getElementById('finalGameSelection').value = JSON.stringify(selectedGameData);
      
      // Set extensions data
      const hasExtensions = document.getElementById('hasExtensions').checked;
      if (hasExtensions) {
        const extensions = Array.from(document.querySelectorAll('.extension-item')).map(item => {
          const name = item.querySelector('input[name="extension-name"]').value;
          const link = item.querySelector('input[name="extension-link"]').value;
          const time = item.querySelector('input[name="extension-time"]').value;
          return { name: name, downloadLink: link, installationTime: time };
        }).filter(ext => ext.name && ext.downloadLink && ext.installationTime);
        
        document.getElementById('finalExtensions').value = JSON.stringify(extensions);
      } else {
        document.getElementById('finalExtensions').value = '';
      }
    }

    // Error handling
    function showError(message) {
      // Create error message element
      const errorDiv = document.createElement('div');
      errorDiv.className = 'error-message';
      errorDiv.innerHTML = `
        <div class="error-content">
          <span class="error-icon">‚ö†Ô∏è</span>
          <span class="error-text">${message}</span>
          <button class="error-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
      `;
      
      // Insert at top of current step
      const currentStepElement = document.querySelector('.wizard-step.active');
      currentStepElement.insertBefore(errorDiv, currentStepElement.firstChild);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (errorDiv.parentNode) {
          errorDiv.remove();
        }
      }, 5000);
      
      // Scroll to error
      errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    function setupFormValidation() {
      // Real-time validation for event name
      document.getElementById('eventName').addEventListener('input', function() {
        if (this.value.trim().length > 0) {
          this.classList.remove('error');
        }
      });
      
      // Real-time validation for description
      document.getElementById('eventDescription').addEventListener('input', function() {
        if (this.value.trim().length > 0) {
          this.classList.remove('error');
        }
      });
      
      // Real-time validation for player limit
      document.getElementById('playerLimit').addEventListener('input', function() {
        if (this.value >= 2) {
          this.classList.remove('error');
        }
      });
      
      // Real-time validation for date
      document.getElementById('eventDate').addEventListener('change', function() {
        const eventDate = new Date(this.value);
        const now = new Date();
        if (eventDate > now) {
          this.classList.remove('error');
        }
      });
    }

    // Description validation with character counter
    function setupDescriptionValidation() {
      const descriptionField = document.getElementById('eventDescription');
      const counter = document.getElementById('descriptionCounter');
      const validation = document.getElementById('descriptionValidation');
      const nextButton = document.querySelector('.action-button.primary');
      
      function updateDescriptionValidation() {
        const length = descriptionField.value.length;
        const isValid = length >= 10;
        
        // Update counter
        counter.textContent = `${length}/10 characters minimum`;
        
        // Update styling
        if (length === 0) {
          // No input yet
          counter.className = 'char-counter';
          validation.style.display = 'none';
          descriptionField.classList.remove('valid', 'invalid');
        } else if (isValid) {
          // Valid input
          counter.className = 'char-counter valid';
          validation.style.display = 'none';
          descriptionField.classList.remove('invalid');
          descriptionField.classList.add('valid');
        } else {
          // Invalid input
          counter.className = 'char-counter invalid';
          validation.textContent = `Please add ${10 - length} more characters`;
          validation.style.display = 'block';
          descriptionField.classList.remove('valid');
          descriptionField.classList.add('invalid');
        }
        
        // Update next button state
        updateNextButtonState();
      }
      
      function updateNextButtonState() {
        const name = document.getElementById('eventName').value.trim();
        const description = document.getElementById('eventDescription').value.trim();
        const playerLimit = document.getElementById('playerLimit').value;
        const date = document.getElementById('eventDate').value;
        
        const isValid = name.length > 0 && 
                       description.length >= 10 && 
                       playerLimit >= 2 && 
                       date.length > 0;
        
        if (nextButton) {
          nextButton.disabled = !isValid;
          if (isValid) {
            nextButton.classList.remove('disabled');
          } else {
            nextButton.classList.add('disabled');
          }
        }
      }
      
      // Add event listeners
      descriptionField.addEventListener('input', updateDescriptionValidation);
      document.getElementById('eventName').addEventListener('input', updateNextButtonState);
      document.getElementById('playerLimit').addEventListener('input', updateNextButtonState);
      document.getElementById('eventDate').addEventListener('change', updateNextButtonState);
      
      // Initial validation
      updateDescriptionValidation();
    }

    // Form submission handler
    document.getElementById('eventForm').addEventListener('submit', function(e) {
      // Final validation before submission
      if (!validateCurrentStep()) {
        e.preventDefault();
        return false;
      }
      
      // Show loading state
      const submitBtn = document.querySelector('.create-event-btn');
      submitBtn.disabled = true;
      submitBtn.innerHTML = 'üöÄ Creating Event...';
      
      // Let the form submit normally
      return true;
    });
  </script>
</body>
</html>

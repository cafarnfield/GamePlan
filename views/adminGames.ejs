<% 
  const layoutData = {
    title: 'Games Management',
    currentPage: 'games',
    pageTitle: 'Games Management',
    pageSubtitle: 'Manage game library and approvals',
    breadcrumbs: [
      { name: 'Games', url: null }
    ],
    pendingUsers: typeof pendingUsers !== 'undefined' ? pendingUsers : 0,
    pendingEvents: typeof pendingEvents !== 'undefined' ? pendingEvents : 0,
    pendingGames: games.filter(g => g.status === 'pending').length,
    totalPending: (typeof pendingUsers !== 'undefined' ? pendingUsers : 0) + (typeof pendingEvents !== 'undefined' ? pendingEvents : 0) + games.filter(g => g.status === 'pending').length,
    isDevelopmentAutoLogin: isDevelopmentAutoLogin,
    user: typeof user !== 'undefined' ? user : null
  };
%>

<%- include('partials/adminLayoutHeader', layoutData) %>

<style>
  .games-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .games-stats {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
  }
  
  .stat-badge {
    background: rgba(0, 50, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 8px 15px;
    font-size: 10px;
    color: #00ff00;
  }
  
  .stat-badge.pending {
    background: rgba(255, 165, 0, 0.2);
    border-color: #ffa500;
    color: #ffa500;
    animation: pulse 2s infinite;
  }
  
  .stat-badge.approved {
    background: rgba(0, 255, 0, 0.2);
    border-color: #00ff00;
    color: #00ff00;
  }
  
  .stat-badge.steam {
    background: rgba(0, 100, 255, 0.2);
    border-color: #0066ff;
    color: #00ffff;
  }

  .stat-badge.rawg {
    background: rgba(255, 165, 0, 0.2);
    border-color: #ffa500;
    color: #ffa500;
  }

  .stat-badge.manual {
    background: rgba(128, 0, 128, 0.2);
    border-color: #800080;
    color: #800080;
  }
  
  .games-actions {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .action-btn {
    background: rgba(0, 255, 0, 0.8);
    color: #000;
    border: 1px solid #00ff00;
    padding: 10px 15px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .action-btn:hover {
    background: rgba(0, 255, 0, 0.9);
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }
  
  .action-btn.secondary {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border-color: #0066ff;
  }
  
  .action-btn.secondary:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .action-btn.danger {
    background: rgba(255, 0, 0, 0.8);
    color: #fff;
    border-color: #ff0000;
  }
  
  .action-btn.danger:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  .filters-section {
    background: rgba(0, 20, 0, 0.8);
    border: 1px solid #00ff00;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .filters-title {
    font-size: 12px;
    color: #00ff00;
    margin: 0 0 15px 0;
  }
  
  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
  }
  
  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .filter-label {
    font-size: 8px;
    color: #888;
  }
  
  .filter-input, .filter-select {
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  .filter-input:focus, .filter-select:focus {
    outline: none;
    border-color: #00ffff;
    box-shadow: 0 0 5px rgba(0, 255, 255, 0.3);
  }
  
  .filter-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    flex-wrap: wrap;
  }
  
  .bulk-actions {
    background: rgba(0, 0, 100, 0.1);
    border: 2px solid #0066ff;
    padding: 20px;
    margin-bottom: 30px;
    display: none;
  }
  
  .bulk-actions.show {
    display: block;
  }
  
  .bulk-actions-title {
    font-size: 12px;
    color: #0066ff;
    margin: 0 0 15px 0;
  }
  
  .bulk-actions-content {
    display: flex;
    gap: 15px;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .selected-count {
    font-size: 10px;
    color: #00ffff;
  }
  
  .bulk-notes {
    flex: 1;
    min-width: 200px;
    background: #000;
    color: #00ff00;
    border: 1px solid #00ff00;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
  }
  
  
  .game-tag {
    background: rgba(0, 100, 255, 0.2);
    color: #00ffff;
    padding: 2px 6px;
    font-size: 6px;
    border-radius: 3px;
    border: 1px solid #0066ff;
  }
  
  .source-badge {
    display: inline-block;
    padding: 2px 6px;
    font-size: 6px;
    border-radius: 3px;
    margin-right: 5px;
  }
  
  .source-steam {
    background: rgba(0, 100, 255, 0.2);
    color: #00ffff;
    border: 1px solid #0066ff;
  }
  
  .source-manual {
    background: rgba(255, 165, 0, 0.2);
    color: #ffa500;
    border: 1px solid #ffa500;
  }
  
  .source-admin {
    background: rgba(0, 255, 0, 0.2);
    color: #00ff00;
    border: 1px solid #00ff00;
  }
  
  .game-actions {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }
  
  .game-btn {
    background: rgba(0, 100, 255, 0.8);
    color: #fff;
    border: 1px solid #0066ff;
    padding: 6px 10px;
    font-family: 'Press Start 2P', monospace;
    font-size: 6px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .game-btn:hover {
    background: rgba(0, 150, 255, 0.9);
  }
  
  .game-btn.approve {
    background: rgba(0, 255, 0, 0.8);
    border-color: #00ff00;
    color: #000;
  }
  
  .game-btn.approve:hover {
    background: rgba(0, 255, 0, 0.9);
  }
  
  .game-btn.reject {
    background: rgba(255, 0, 0, 0.8);
    border-color: #ff0000;
  }
  
  .game-btn.reject:hover {
    background: rgba(255, 0, 0, 0.9);
  }
  
  .game-btn.edit {
    background: rgba(255, 165, 0, 0.8);
    border-color: #ffa500;
  }
  
  .game-btn.edit:hover {
    background: rgba(255, 165, 0, 0.9);
  }
  
  .game-btn.duplicates {
    background: rgba(255, 255, 0, 0.8);
    border-color: #ffff00;
    color: #000;
  }
  
  .game-btn.duplicates:hover {
    background: rgba(255, 255, 0, 0.9);
  }
  
  .games-table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(0, 10, 0, 0.8);
    border: 1px solid #00ff00;
    margin-bottom: 30px;
  }
  
  .games-table th,
  .games-table td {
    border: 1px solid #00ff00;
    padding: 10px;
    text-align: left;
    font-size: 8px;
  }
  
  .games-table th {
    background: rgba(0, 50, 0, 0.8);
    color: #00ff00;
    font-size: 10px;
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .games-table tr:nth-child(even) {
    background: rgba(0, 20, 0, 0.5);
  }
  
  .games-table tr:hover {
    background: rgba(0, 255, 0, 0.1);
  }
  
  .table-checkbox {
    width: 16px;
    height: 16px;
  }
  
  .no-games {
    text-align: center;
    padding: 60px 20px;
    color: #888;
    font-size: 12px;
  }
  
  .no-games-icon {
    font-size: 48px;
    margin-bottom: 20px;
    display: block;
  }
  
  .duplicates-alert {
    background: rgba(255, 255, 0, 0.1);
    border: 1px solid #ffff00;
    padding: 10px;
    margin: 10px 0;
    border-radius: 3px;
  }
  
  .duplicates-alert h4 {
    color: #ffff00;
    margin: 0 0 10px 0;
    font-size: 8px;
  }
  
  .duplicate-item {
    background: rgba(0, 0, 0, 0.3);
    padding: 8px;
    margin: 5px 0;
    border-radius: 3px;
    font-size: 7px;
  }
  
  .duplicate-similarity {
    color: #ffff00;
    font-weight: bold;
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .games-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .games-stats {
      justify-content: center;
    }
    
    .games-actions {
      justify-content: center;
    }
    
    .filters-grid {
      grid-template-columns: 1fr;
    }
    
    .bulk-actions-content {
      flex-direction: column;
      align-items: stretch;
    }
    
    .games-table {
      font-size: 6px;
    }
    
    .games-table th,
    .games-table td {
      padding: 5px;
    }
  }
</style>

<!-- Games Header -->
<div class="games-header">
<div class="games-stats">
    <div class="stat-badge">
      Total: <%= games.length %>
    </div>
    <div class="stat-badge pending">
      Pending: <%= games.filter(g => g.status === 'pending').length %>
    </div>
    <div class="stat-badge approved">
      Approved: <%= games.filter(g => g.status === 'approved').length %>
    </div>
    <div class="stat-badge steam">
      Steam: <%= games.filter(g => g.source === 'steam').length %>
    </div>
    <div class="stat-badge rawg">
      RAWG: <%= games.filter(g => g.source === 'rawg').length %>
    </div>
    <div class="stat-badge manual">
      Manual: <%= games.filter(g => g.source === 'manual').length %>
    </div>
  </div>
  
  <div class="games-actions">
    <button onclick="toggleBulkActions()" class="action-btn secondary">üìã Bulk Actions</button>
    <% if (games.filter(g => g.status === 'pending').length > 0) { %>
      <a href="/admin/games?status=pending" class="action-btn">‚è≥ Review Pending</a>
    <% } %>
    <a href="/admin/add-game" class="action-btn">‚ûï Add Game</a>
  </div>
</div>

<!-- Filters Section -->
<div class="filters-section">
  <h3 class="filters-title">üîç Filter Games</h3>
  
  <form method="GET" action="/admin/games" id="filterForm">
    <div class="filters-grid">
      <div class="filter-group">
        <label class="filter-label">Status</label>
        <select name="status" class="filter-select">
          <option value="">All Games</option>
          <option value="pending" <%= filter === 'pending' ? 'selected' : '' %>>Pending</option>
          <option value="approved" <%= filter === 'approved' ? 'selected' : '' %>>Approved</option>
          <option value="rejected" <%= filter === 'rejected' ? 'selected' : '' %>>Rejected</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Source</label>
        <select name="source" class="filter-select">
          <option value="">All Sources</option>
          <option value="steam" <%= sourceFilter === 'steam' ? 'selected' : '' %>>Steam</option>
          <option value="manual" <%= sourceFilter === 'manual' ? 'selected' : '' %>>Manual</option>
          <option value="admin" <%= sourceFilter === 'admin' ? 'selected' : '' %>>Admin</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Search Name</label>
        <input type="text" name="search" class="filter-input" placeholder="Game name..." value="<%= typeof search !== 'undefined' ? search : '' %>">
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Added By</label>
        <input type="text" name="addedBy" class="filter-input" placeholder="User name..." value="<%= typeof addedBy !== 'undefined' ? addedBy : '' %>">
      </div>
    </div>
    
    <div class="filter-actions">
      <button type="submit" class="action-btn">Apply Filters</button>
      <a href="/admin/games" class="action-btn secondary">Clear All</a>
    </div>
  </form>
</div>


<!-- Bulk Actions -->
<div class="bulk-actions" id="bulkActions">
  <h3 class="bulk-actions-title">üìã Bulk Actions</h3>
  <div class="bulk-actions-content">
    <span class="selected-count" id="selectedCount">0 games selected</span>
    <input type="text" class="bulk-notes" id="bulkNotes" placeholder="Add notes for bulk action...">
    <button onclick="bulkApprove()" class="action-btn">‚úÖ Approve Selected</button>
    <button onclick="bulkReject()" class="action-btn danger">‚ùå Reject Selected</button>
    <button onclick="bulkDelete()" class="action-btn danger">üóëÔ∏è Delete Selected</button>
    <button onclick="clearSelection()" class="action-btn secondary">Clear Selection</button>
  </div>
</div>

<!-- Games Content -->
<div id="gamesContent">
  <% if (games.length === 0) { %>
    <div class="no-games">
      <span class="no-games-icon">üéÆ</span>
      <h3>No games found</h3>
      <p>No games match your current filters.</p>
    </div>
  <% } else { %>
    
    <!-- Table View -->
    <div id="tableView">
      <table class="games-table">
        <thead>
          <tr>
            <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
            <th>Game Name</th>
            <th>Source</th>
            <th>Status</th>
            <th>Added By</th>
            <th>Categories/Tags</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% games.forEach(game => { %>
            <tr>
              <td><input type="checkbox" class="table-checkbox game-checkbox" value="<%= game._id %>" onchange="updateBulkActions()"></td>
              <td>
                <strong><%= game.name %></strong>
                <% if (game.description) { %>
                  <br><small style="color: #888;"><%= game.description.substring(0, 50) %>...</small>
                <% } %>
                <% if (game.steamAppId) { %>
                  <br><small style="color: #666;">Steam: <%= game.steamAppId %></small>
                <% } %>
              </td>
              <td>
                <span class="source-badge source-<%= game.source || 'admin' %>">
                  <%= (game.source || 'admin').toUpperCase() %>
                </span>
              </td>
              <td>
                <span class="game-status <%= game.status %>"><%= game.status.toUpperCase() %></span>
              </td>
              <td>
                <% if (game.addedBy) { %>
                  <%= game.addedBy.name %><br>
                  <small><%= game.addedBy.email %></small>
                <% } else { %>
                  System
                <% } %>
              </td>
              <td>
                <% if (game.categories && game.categories.length > 0) { %>
                  <% game.categories.forEach(category => { %>
                    <span class="game-tag"><%= category %></span>
                  <% }); %>
                <% } %>
                <% if (game.tags && game.tags.length > 0) { %>
                  <% game.tags.forEach(tag => { %>
                    <span class="game-tag"><%= tag %></span>
                  <% }); %>
                <% } %>
              </td>
              <td><%= new Date(game.createdAt).toLocaleDateString() %></td>
              <td>
                <div class="game-actions">
                  <% if (game.status === 'pending') { %>
                    <button onclick="approveGame('<%= game._id %>', '<%= game.name %>')" class="game-btn approve">Approve</button>
                    <button onclick="rejectGame('<%= game._id %>', '<%= game.name %>')" class="game-btn reject">Reject</button>
                  <% } %>
                  <button onclick="editGame('<%= game._id %>')" class="game-btn edit">Edit</button>
                  <button onclick="deleteGame('<%= game._id %>', '<%= game.name %>')" class="game-btn reject">Delete</button>
                </div>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  <% } %>
</div>

<!-- Pagination -->
<%- include('partials/pagination', { currentPage, totalPages, req }) %>

<script>
  
  function toggleBulkActions() {
    const bulkActions = document.getElementById('bulkActions');
    bulkActions.classList.toggle('show');
  }
  
  function updateBulkActions() {
    const checkboxes = document.querySelectorAll('.game-checkbox:checked');
    const bulkActions = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');
    
    selectedCount.textContent = `${checkboxes.length} games selected`;
    
    if (checkboxes.length > 0) {
      bulkActions.classList.add('show');
    }
  }
  
  function toggleSelectAll() {
    const selectAll = document.getElementById('selectAll');
    const checkboxes = document.querySelectorAll('.game-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectAll.checked;
    });
    
    updateBulkActions();
  }
  
  function clearSelection() {
    const checkboxes = document.querySelectorAll('.game-checkbox');
    checkboxes.forEach(checkbox => checkbox.checked = false);
    
    const selectAll = document.getElementById('selectAll');
    if (selectAll) selectAll.checked = false;
    
    updateBulkActions();
  }
  
  async function approveGame(gameId, gameName) {
    const notes = prompt(`Add notes for approving "${gameName}" (optional):`);
    if (notes === null) return; // User cancelled
    
    try {
      const response = await fetch(`/admin/game/approve/${gameId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error approving game');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error approving game');
    }
  }
  
  async function rejectGame(gameId, gameName) {
    const notes = prompt(`Add reason for rejecting "${gameName}":`);
    if (!notes || notes.trim() === '') {
      alert('Please provide a reason for rejection');
      return;
    }
    
    if (!confirm(`Are you sure you want to reject "${gameName}"? This will delete all associated pending events.`)) {
      return;
    }
    
    try {
      const response = await fetch(`/admin/game/reject/${gameId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error rejecting game');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error rejecting game');
    }
  }
  
  async function deleteGame(gameId, gameName) {
    if (!confirm(`Are you sure you want to delete "${gameName}"? This will affect all associated events.`)) return;
    
    try {
      const response = await fetch(`/admin/delete-game/${gameId}`, { method: 'POST' });
      if (response.ok) {
        location.reload();
      } else {
        alert('Error deleting game');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error deleting game');
    }
  }
  
  function editGame(gameId) {
    // For now, show alert - can be enhanced later
    alert('Edit functionality coming soon. Game ID: ' + gameId);
  }
  
  function showDuplicates(gameId) {
    // This function can be enhanced to show a modal with duplicate details
    alert('Duplicate details shown in the card. Merge functionality coming soon.');
  }
  
  async function bulkApprove() {
    const checkboxes = document.querySelectorAll('.game-checkbox:checked');
    const gameIds = Array.from(checkboxes).map(cb => cb.value);
    const notes = document.getElementById('bulkNotes').value;
    
    if (gameIds.length === 0) {
      alert('Please select games first');
      return;
    }
    
    if (!confirm(`Are you sure you want to approve ${gameIds.length} game(s)?`)) return;
    
    try {
      const response = await fetch('/admin/games/bulk-approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ gameIds, notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error approving games');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error approving games');
    }
  }
  
  async function bulkReject() {
    const checkboxes = document.querySelectorAll('.game-checkbox:checked');
    const gameIds = Array.from(checkboxes).map(cb => cb.value);
    const notes = document.getElementById('bulkNotes').value;
    
    if (gameIds.length === 0) {
      alert('Please select games first');
      return;
    }
    
    if (!notes || notes.trim() === '') {
      alert('Please provide a reason for bulk rejection');
      return;
    }
    
    if (!confirm(`Are you sure you want to reject ${gameIds.length} game(s)? This will delete all associated pending events.`)) return;
    
    try {
      const response = await fetch('/admin/games/bulk-reject', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ gameIds, notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error rejecting games');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error rejecting games');
    }
  }
  
  async function bulkDelete() {
    const checkboxes = document.querySelectorAll('.game-checkbox:checked');
    const gameIds = Array.from(checkboxes).map(cb => cb.value);
    const notes = document.getElementById('bulkNotes').value;
    
    if (gameIds.length === 0) {
      alert('Please select games first');
      return;
    }
    
    if (!confirm(`Are you sure you want to delete ${gameIds.length} game(s)? This action cannot be undone.`)) return;
    
    try {
      const response = await fetch('/admin/games/bulk-delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ gameIds, notes })
      });
      
      if (response.ok) {
        location.reload();
      } else {
        alert('Error deleting games');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error deleting games');
    }
  }
  
</script>

<%- include('partials/adminLayoutFooter') %>

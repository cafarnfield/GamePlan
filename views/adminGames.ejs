<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Games Management - GamePlan</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="scanlines"></div>
  <% if (isDevelopmentAutoLogin) { %>
    <div class="dev-banner">
      üöß DEVELOPMENT MODE - Auto-logged in as admin üöß
    </div>
  <% } %>
  
  <header>
    <h1>GamePlan Admin</h1>
    <nav>
      <a href="/admin/dashboard">Dashboard</a>
      <a href="/admin/users">Users</a>
      <a href="/admin/events">Events</a>
      <a href="/admin/games">Games</a>
      <a href="/admin">Legacy Admin</a>
      <a href="/">Home</a>
      <a href="/logout">Logout</a>
    </nav>
  </header>

  <main>
    <h2>Games Management</h2>
    
    <!-- Filter Controls -->
    <div class="filter-controls">
      <form method="GET" action="/admin/games" style="display: inline-block;">
        <select name="status" onchange="this.form.submit()">
          <option value="">All Status</option>
          <option value="pending" <%= filter === 'pending' ? 'selected' : '' %>>Pending</option>
          <option value="approved" <%= filter === 'approved' ? 'selected' : '' %>>Approved</option>
          <option value="rejected" <%= filter === 'rejected' ? 'selected' : '' %>>Rejected</option>
        </select>
        
        <select name="source" onchange="this.form.submit()">
          <option value="">All Sources</option>
          <option value="steam" <%= sourceFilter === 'steam' ? 'selected' : '' %>>Steam</option>
          <option value="manual" <%= sourceFilter === 'manual' ? 'selected' : '' %>>Manual</option>
          <option value="admin" <%= sourceFilter === 'admin' ? 'selected' : '' %>>Admin</option>
        </select>
        
        <input type="hidden" name="status" value="<%= filter || '' %>">
        <input type="hidden" name="source" value="<%= sourceFilter || '' %>">
      </form>
      
      <a href="/admin/games" class="admin-link">Clear Filters</a>
    </div>

    <!-- Games Statistics -->
    <div class="stats-summary">
      <div class="stat-item">
        <span class="stat-label">Total Games:</span>
        <span class="stat-value"><%= games.length %></span>
      </div>
      <div class="stat-item">
        <span class="stat-label">Pending:</span>
        <span class="stat-value"><%= games.filter(g => g.status === 'pending').length %></span>
      </div>
      <div class="stat-item">
        <span class="stat-label">Approved:</span>
        <span class="stat-value"><%= games.filter(g => g.status === 'approved').length %></span>
      </div>
    </div>

    <!-- Games Table -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th>Game Name</th>
            <th>Source</th>
            <th>Status</th>
            <th>Added By</th>
            <th>Categories/Tags</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% games.forEach(game => { %>
            <tr class="<%= game.status === 'pending' ? 'pending-row' : '' %>">
              <td>
                <div class="game-name-cell">
                  <strong><%= game.name %></strong>
                  <% if (game.description) { %>
                    <p class="game-description"><%= game.description.substring(0, 100) %><%= game.description.length > 100 ? '...' : '' %></p>
                  <% } %>
                  <% if (game.steamAppId) { %>
                    <small class="steam-id">Steam ID: <%= game.steamAppId %></small>
                  <% } %>
                </div>
              </td>
              
              <td>
                <span class="source-badge source-<%= game.source || 'admin' %>">
                  <%= (game.source || 'admin').toUpperCase() %>
                </span>
              </td>
              
              <td>
                <span class="status-badge status-<%= game.status %>">
                  <%= game.status.toUpperCase() %>
                </span>
              </td>
              
              <td>
                <% if (game.addedBy) { %>
                  <%= game.addedBy.name %><br>
                  <small><%= game.addedBy.email %></small>
                <% } else { %>
                  <span class="system-added">System</span>
                <% } %>
              </td>
              
              <td>
                <% if (game.categories && game.categories.length > 0) { %>
                  <div class="categories">
                    <% game.categories.forEach(category => { %>
                      <span class="category-tag"><%= category %></span>
                    <% }); %>
                  </div>
                <% } %>
                <% if (game.tags && game.tags.length > 0) { %>
                  <div class="tags">
                    <% game.tags.forEach(tag => { %>
                      <span class="custom-tag"><%= tag %></span>
                    <% }); %>
                  </div>
                <% } %>
              </td>
              
              <td>
                <%= new Date(game.createdAt).toLocaleDateString() %>
              </td>
              
              <td>
                <div class="action-buttons">
                  <% if (game.status === 'pending') { %>
                    <button onclick="approveGame('<%= game._id %>')" class="approve-btn">Approve</button>
                    <button onclick="rejectGame('<%= game._id %>')" class="reject-btn">Reject</button>
                  <% } %>
                  
                  <% if (game.potentialDuplicates && game.potentialDuplicates.length > 0) { %>
                    <button onclick="showDuplicates('<%= game._id %>')" class="duplicates-btn">
                      Duplicates (<%= game.potentialDuplicates.length %>)
                    </button>
                  <% } %>
                  
                  <button onclick="editGame('<%= game._id %>')" class="edit-btn">Edit</button>
                  <button onclick="deleteGame('<%= game._id %>')" class="delete-btn">Delete</button>
                </div>
              </td>
            </tr>
            
            <!-- Potential Duplicates Row -->
            <% if (game.potentialDuplicates && game.potentialDuplicates.length > 0) { %>
              <tr id="duplicates-<%= game._id %>" class="duplicates-row" style="display: none;">
                <td colspan="7">
                  <div class="duplicates-container">
                    <h4>‚ö†Ô∏è Potential Duplicates Found</h4>
                    <% game.potentialDuplicates.forEach(duplicate => { %>
                      <div class="duplicate-item">
                        <div class="duplicate-info">
                          <strong><%= duplicate.game.name %></strong>
                          <span class="similarity">(<%= duplicate.similarity %>% similar)</span>
                          <p><%= duplicate.game.description || 'No description' %></p>
                          <small><%= duplicate.reason %></small>
                        </div>
                        <div class="duplicate-actions">
                          <button onclick="mergeGames('<%= game._id %>', '<%= duplicate.game._id %>')" class="merge-btn">
                            Merge into this game
                          </button>
                          <button onclick="mergeGames('<%= duplicate.game._id %>', '<%= game._id %>')" class="merge-btn">
                            Use this as main
                          </button>
                        </div>
                      </div>
                    <% }); %>
                  </div>
                </td>
              </tr>
            <% } %>
          <% }); %>
        </tbody>
      </table>
    </div>

    <% if (games.length === 0) { %>
      <div class="no-results">
        <p>No games found matching the current filters.</p>
      </div>
    <% } %>
  </main>

  <!-- Action Modals -->
  <div id="actionModal" class="modal" style="display: none;">
    <div class="modal-content">
      <h3 id="modalTitle">Action</h3>
      <p id="modalMessage">Are you sure?</p>
      <textarea id="modalNotes" placeholder="Optional notes..." style="width: 100%; margin: 1rem 0;"></textarea>
      <div class="modal-actions">
        <button id="confirmAction" class="confirm-btn">Confirm</button>
        <button onclick="closeModal()" class="cancel-btn">Cancel</button>
      </div>
    </div>
  </div>

  <style>
    .filter-controls {
      margin: 2rem 0;
      padding: 1rem;
      background: var(--dark-blue);
      border: 1px solid var(--dark-teal);
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .stats-summary {
      display: flex;
      gap: 2rem;
      margin: 1rem 0;
      padding: 1rem;
      background: var(--darker-blue);
      border: 1px solid var(--dark-teal);
      flex-wrap: wrap;
    }

    .stat-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
    }

    .stat-label {
      font-size: 0.5rem;
      color: var(--muted-cyan);
    }

    .stat-value {
      font-size: 0.8rem;
      color: var(--teal-cyan);
      text-shadow: 0 0 5px var(--teal-cyan);
    }

    .table-container {
      overflow-x: auto;
      margin: 2rem 0;
    }

    .game-name-cell {
      max-width: 200px;
    }

    .game-description {
      font-size: 0.4rem;
      color: var(--muted-cyan);
      margin: 0.5rem 0;
      opacity: 0.8;
      line-height: 1.3;
    }

    .steam-id {
      font-size: 0.4rem;
      color: var(--dark-teal);
    }

    .source-badge, .status-badge {
      padding: 0.2rem 0.5rem;
      font-size: 0.4rem;
      border-radius: 3px;
      font-weight: bold;
    }

    .source-steam {
      background: #1b2838;
      color: #66c0f4;
    }

    .source-manual {
      background: #2d1b69;
      color: #7c4dff;
    }

    .source-admin {
      background: #1a472a;
      color: #4caf50;
    }

    .status-pending {
      background: #ff6b35;
      color: #000;
      animation: statusPulse 2s ease-in-out infinite;
    }

    .status-approved {
      background: #4caf50;
      color: #000;
    }

    .status-rejected {
      background: #f44336;
      color: #fff;
    }

    @keyframes statusPulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }

    .pending-row {
      background: rgba(255, 107, 53, 0.1);
      border-left: 4px solid #ff6b35;
    }

    .categories, .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3rem;
      margin: 0.3rem 0;
    }

    .category-tag {
      background: var(--dark-teal);
      color: var(--teal-cyan);
      padding: 0.1rem 0.3rem;
      font-size: 0.35rem;
      border-radius: 2px;
    }

    .custom-tag {
      background: var(--darker-blue);
      color: var(--muted-cyan);
      padding: 0.1rem 0.3rem;
      font-size: 0.35rem;
      border-radius: 2px;
      border: 1px solid var(--dark-teal);
    }

    .system-added {
      color: var(--dark-teal);
      font-style: italic;
      font-size: 0.5rem;
    }

    .action-buttons {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
      min-width: 120px;
    }

    .action-buttons button {
      padding: 0.3rem 0.6rem;
      font-size: 0.4rem;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .approve-btn {
      background: #4caf50;
      color: #000;
    }

    .approve-btn:hover {
      background: #66bb6a;
    }

    .reject-btn {
      background: #f44336;
      color: #fff;
    }

    .reject-btn:hover {
      background: #ef5350;
    }

    .duplicates-btn {
      background: #ff9800;
      color: #000;
    }

    .duplicates-btn:hover {
      background: #ffb74d;
    }

    .edit-btn {
      background: var(--teal-cyan);
      color: #000;
    }

    .edit-btn:hover {
      background: var(--muted-cyan);
    }

    .delete-btn {
      background: #9e9e9e;
      color: #000;
    }

    .delete-btn:hover {
      background: #bdbdbd;
    }

    .duplicates-row {
      background: rgba(255, 152, 0, 0.1);
    }

    .duplicates-container {
      padding: 1rem;
      border: 2px solid #ff9800;
      border-radius: 5px;
      background: rgba(255, 152, 0, 0.05);
    }

    .duplicates-container h4 {
      color: #ff9800;
      margin: 0 0 1rem 0;
      font-size: 0.6rem;
    }

    .duplicate-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.8rem;
      margin: 0.5rem 0;
      background: var(--dark-blue);
      border: 1px solid var(--dark-teal);
      border-radius: 3px;
    }

    .duplicate-info {
      flex: 1;
    }

    .duplicate-info strong {
      color: var(--teal-cyan);
      font-size: 0.6rem;
    }

    .similarity {
      color: #ff9800;
      font-size: 0.5rem;
      margin-left: 0.5rem;
    }

    .duplicate-info p {
      margin: 0.3rem 0;
      font-size: 0.45rem;
      color: var(--muted-cyan);
    }

    .duplicate-info small {
      color: var(--dark-teal);
      font-size: 0.4rem;
    }

    .duplicate-actions {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
    }

    .merge-btn {
      background: #2196f3;
      color: #fff;
      padding: 0.3rem 0.6rem;
      font-size: 0.4rem;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .merge-btn:hover {
      background: #42a5f5;
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background: var(--dark-blue);
      border: 2px solid var(--teal-cyan);
      padding: 2rem;
      max-width: 500px;
      width: 90%;
      border-radius: 5px;
      box-shadow: 0 0 20px rgba(0, 255, 204, 0.3);
    }

    .modal-content h3 {
      color: var(--teal-cyan);
      margin: 0 0 1rem 0;
      text-shadow: 0 0 5px var(--teal-cyan);
    }

    .modal-content p {
      color: var(--muted-cyan);
      margin: 0 0 1rem 0;
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
    }

    .confirm-btn {
      background: #4caf50;
      color: #000;
    }

    .cancel-btn {
      background: #9e9e9e;
      color: #000;
    }

    .no-results {
      text-align: center;
      padding: 3rem;
      color: var(--muted-cyan);
      font-size: 0.6rem;
    }

    @media (max-width: 768px) {
      .filter-controls {
        flex-direction: column;
        align-items: stretch;
      }

      .stats-summary {
        flex-direction: column;
        gap: 1rem;
      }

      .action-buttons {
        flex-direction: row;
        flex-wrap: wrap;
      }

      .duplicate-item {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
      }

      .duplicate-actions {
        flex-direction: row;
      }
    }
  </style>

  <script>
    let currentAction = null;
    let currentGameId = null;

    function approveGame(gameId) {
      showModal('Approve Game', 'Are you sure you want to approve this game? This will make all associated events visible.', () => {
        performAction('/admin/game/approve/' + gameId, 'POST');
      });
    }

    function rejectGame(gameId) {
      showModal('Reject Game', 'Are you sure you want to reject this game? This will delete all associated pending events.', () => {
        performAction('/admin/game/reject/' + gameId, 'POST');
      });
    }

    function mergeGames(duplicateId, canonicalId) {
      showModal('Merge Games', 'Are you sure you want to merge these games? This action cannot be undone.', () => {
        performAction('/admin/game/merge/' + duplicateId + '/' + canonicalId, 'POST');
      });
    }

    function deleteGame(gameId) {
      showModal('Delete Game', 'Are you sure you want to delete this game? This will affect all associated events.', () => {
        performAction('/admin/delete-game/' + gameId, 'POST');
      });
    }

    function editGame(gameId) {
      // For now, redirect to a simple edit page or show alert
      alert('Edit functionality coming soon. Game ID: ' + gameId);
    }

    function showDuplicates(gameId) {
      const duplicatesRow = document.getElementById('duplicates-' + gameId);
      if (duplicatesRow.style.display === 'none') {
        duplicatesRow.style.display = 'table-row';
      } else {
        duplicatesRow.style.display = 'none';
      }
    }

    function showModal(title, message, confirmCallback) {
      document.getElementById('modalTitle').textContent = title;
      document.getElementById('modalMessage').textContent = message;
      document.getElementById('modalNotes').value = '';
      document.getElementById('actionModal').style.display = 'flex';
      
      document.getElementById('confirmAction').onclick = () => {
        confirmCallback();
        closeModal();
      };
    }

    function closeModal() {
      document.getElementById('actionModal').style.display = 'none';
    }

    async function performAction(url, method) {
      const notes = document.getElementById('modalNotes').value;
      
      try {
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ notes })
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.json();
          alert('Error: ' + (error.error || 'Unknown error occurred'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Network error occurred');
      }
    }

    // Close modal when clicking outside
    document.getElementById('actionModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeModal();
      }
    });
  </script>
</body>
</html>
